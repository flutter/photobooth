// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.13.0-211.13.beta.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateInitializationError(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == "string")
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI: function(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$localNI: function(localName) {
      return new H.LateError("Local '" + localName + "' has not been initialized.");
    },
    checkNotNullable: function(value, $name, $T) {
      return value;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S: function(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = C.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti: function(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0;
      return t1;
    },
    Primitives_getMonth: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1;
      return t1;
    },
    Primitives_getDay: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0;
      return t1;
    },
    Primitives_getHours: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0;
      return t1;
    },
    Primitives_getMinutes: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0;
      return t1;
    },
    Primitives_getSeconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0;
      return t1;
    },
    Primitives_getMilliseconds: function(receiver) {
      var t1 = H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0;
      return t1;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start < 0 || start > $length)
        return P.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return P.RangeError$range(end, start, $length, "end", null);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (ex instanceof H.ExceptionAndStackTrace)
        return H.saveStackTrace(ex, type$.Object._as(ex.dartException));
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace: function(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException: function(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = H.S(message) + " (Error " + ieErrorCode + ")";
              return H.saveStackTrace(ex, new H.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asString(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              H._asString(message);
              return H.saveStackTrace(ex, new H.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, applyTrampoline, i, stub, stubCallName,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, "").constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      type$.Object._as(reflectionInfo);
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(reflectionInfo, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti: function(functionType, isStatic, isIntercepted) {
      var typeEvalMethod;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getTypeFromTypesTable, functionType);
      if (typeof functionType == "string") {
        if (isStatic)
          throw H.wrapException("Cannot compute signature for static tearoff.");
        typeEvalMethod = isIntercepted ? H.BoundClosure_evalRecipeIntercepted : H.BoundClosure_evalRecipe;
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, typeEvalMethod);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + (t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var receiverField, stubName, arity, lookedUpFunction, t1, t2, $arguments,
        selfField = $.BoundClosure_selfFieldNameCache;
      if (selfField == null)
        selfField = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      receiverField = $.BoundClosure_receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + selfField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_evalRecipe: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._self), recipe);
    },
    BoundClosure_evalRecipeIntercepted: function(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found."));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    throwLateInitializationError: function($name) {
      return H.throwExpression(new H.LateError($name));
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _.__js_helper$_target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _ensureNativeList: function(list) {
      return list;
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar: function(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr: function(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType: function(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe: function(rti) {
      return rti._canonicalRecipe;
    },
    findType: function(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute: function(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray: function(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(substitutedRti);
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed: function(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = [];
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.push(t1);
        result.push(t2);
        result.push(substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters: function(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    setRuntimeTypeInfo: function(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType: function(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType: function(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType: function(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType: function(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType: function(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor: function(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss: function(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable: function(index) {
      var table, type, rti;
      H._asInt(index);
      table = init.types;
      type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    _installSpecializedIsTest: function(object) {
      var t1, unstarred, isFn, testRti = this;
      if (testRti === type$.Object)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        t1 = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + t1;
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn: function(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck: function(object) {
      var t1, testRti = this,
        asFn = H._generalAsCheckImplementation;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else {
        t1 = H.isNullable(testRti);
        if (t1)
          asFn = H._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs: function(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation: function(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty: function(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation: function(object) {
      var t1, testRti = this;
      if (object == null) {
        t1 = H.isNullable(testRti);
        if (t1)
          return object;
      } else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation: function(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck: function(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    _Error_compose: function(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + objectTypeDescription + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage: function(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType: function(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject: function(object) {
      return object != null;
    },
    _asObject: function(object) {
      if (object != null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop: function(object) {
      return true;
    },
    _asTop: function(object) {
      return object;
    },
    _isBool: function(object) {
      return true === object || false === object;
    },
    _asBool: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ: function(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt: function(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ: function(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum: function(object) {
      return typeof object == "number";
    },
    _asNum: function(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ: function(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString: function(object) {
      return typeof object == "string";
    },
    _asString: function(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ: function(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString: function(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + H._rtiToString(array[i], genericContext);
      return s;
    },
    _functionRtiToString: function(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (t4 < 0)
            return H.ioore(genericContext, t4);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t3 = false;
            else
              t3 = true;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + H._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + H._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + H._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += H._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString: function(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + H._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length !== 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule: function(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType: function(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = [];
        for (i = 0; i < $length; ++i)
          $arguments.push(erased);
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules: function(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes: function(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval: function(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment: function(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind: function(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests: function(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti: function(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti: function(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti: function(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti: function(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti: function(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin: function($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed: function($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti: function(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length !== 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti: function(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti: function(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti: function(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti: function(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = new Array($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create: function(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse: function(parser) {
      var t2, i, ch, t3, array, head, base, parameters, optionalPositional, named, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(H._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              t3 = parser.u;
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              head = t1.pop();
              if (typeof head == "string")
                t1.push(H._Universe__lookupInterfaceRti(t3, head, array));
              else {
                base = H._Parser_toType(t3, parser.e, head);
                switch (base._kind) {
                  case 11:
                    t1.push(H._Universe__lookupGenericFunctionRti(t3, base, array, parser.n));
                    break;
                  default:
                    t1.push(H._Universe__lookupBindingRti(t3, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(H._Universe__lookupStarRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(H._Universe__lookupQuestionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(H._Universe__lookupFutureOrRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              t3 = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = t3.sEA;
              named = t3.sEA;
              head = t1.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = t1.pop();
                    break;
                  case -2:
                    named = t1.pop();
                    break;
                  default:
                    t1.push(head);
                    break;
                }
              else
                t1.push(head);
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              t1.push(H._Universe__lookupFunctionRti(t3, H._Parser_toType(t3, parser.e, t1.pop()), parameters));
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit: function(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier: function(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations: function(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType: function(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed: function(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType: function(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype: function(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = false;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        if (sKind === 6)
          return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 7;
      }
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = H.Rti__getQuestionFromStar(universe, t);
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, type$.Null, sEnv, t, tEnv);
        return t1 && H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, type$.Null, tEnv);
        return t1 || H._isSubtype(universe, s, sEnv, t._primary, tEnv);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype: function(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype: function(universe, s, sEnv, t, tEnv) {
      var sArgs, tArgs, $length, i, t1, t2, rule, supertypeArgs,
        sName = s._primary,
        tName = t._primary;
      if (sName === tName) {
        sArgs = s._rest;
        tArgs = t._rest;
        $length = sArgs.length;
        for (i = 0; i < $length; ++i) {
          t1 = sArgs[i];
          t2 = tArgs[i];
          if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
            return false;
        }
        return true;
      }
      if (t === type$.Object)
        return true;
      rule = H._Universe_findRule(universe, sName);
      if (rule == null)
        return false;
      supertypeArgs = rule[tName];
      if (supertypeArgs == null)
        return false;
      $length = supertypeArgs.length;
      tArgs = t._rest;
      for (i = 0; i < $length; ++i)
        if (!H._isSubtype(universe, H._Universe_evalInEnvironment(universe, s, supertypeArgs[i]), sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    isNullable: function(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType: function(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = false;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType: function(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign: function(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList: function(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    postMessage$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$2$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      type$.void_Function._as(callback);
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync: function(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn: function(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new P._Future($.Zone__current, type$._Future_dynamic);
          future._state = 4;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError$: function(error, stackTrace) {
      var t1 = H.checkNotNullable(error, "error", type$.Object);
      return new P.AsyncError(t1, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace: function(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, t2 === 2;)
        source = t1._as(source._resultOrListeners);
      if (t2 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var t2, t3, t4, _box_0, hasError, asyncError, nextListener, nextListener0, t5, sourceResult, t6, t7, zone, oldZone, result, current, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t6 = !hasError;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t7 = t5._zone === zone;
            t7 = !(t7 || t7);
          } else
            t7 = false;
          if (t7) {
            t2._as(sourceResult);
            P._rootHandleUncaughtError(_null, _null, t5._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if (t1._state >= 4) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 4;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a valid result"));
    },
    _microtaskLoop: function() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      H.checkNotNullable(stream, "stream", type$.Object);
      return new P._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(error, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    double_parse: function(source) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$("Invalid double", source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from: function(elements, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      return list;
    },
    List_List$of: function(elements, growable, $E) {
      var t1 = P.List_List$_of(elements, $E);
      return t1;
    },
    List_List$_of: function(elements, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$generate: function($length, generator, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    String_String$fromCharCodes: function(charCodes) {
      var array, len, end;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = P.RangeError_checkValidRange(0, null, len);
        return H.Primitives_stringFromCharCodes(end < len ? array.slice(0, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return H.Primitives_stringFromNativeUint8List(charCodes, 0, P.RangeError_checkValidRange(0, null, charCodes.length));
      return P.String__stringFromIterable(charCodes, 0, null);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var i, list,
        it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      for (; it.moveNext$0();)
        list.push(it.get$current());
      return H.Primitives_stringFromCharCodes(list);
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString: function(object) {
      if (typeof object == "number" || H._isBool(object) || null == object)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asInt($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new P._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    }
  },
  W = {
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      if (t1 != null && true)
        C.DedicatedWorkerGlobalScope_methods.addEventListener$3(_target, _eventType, t1, false);
      return new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    Blob: function Blob() {
    },
    Body: function Body() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DomException: function DomException() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    EventStreamProvider: function EventStreamProvider(t0) {
      this.$ti = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  R = {
    ArchiveException$: function(message) {
      return new R.ArchiveException(message, null, null);
    },
    ArchiveException: function ArchiveException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    copyCrop: function(src, x, y, w, h) {
      var t2, dst, t3, t4, t5, t6, sy, yi, t7, t8, sx, xi, t9, t10,
        t1 = src.width;
      x = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(x, 0, t1 - 1));
      t2 = src.height;
      y = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(y, 0, t2 - 1));
      if (x + w > t1)
        w = t1 - x;
      if (y + h > t2)
        h = t2 - y;
      dst = U.Image$(w, h, src.channels, src.exif, src.iccProfile);
      for (t2 = src.data, t3 = t2.length, t4 = dst.data, t5 = dst.width, t6 = t4.length, sy = y, yi = 0; yi < h; ++yi, ++sy)
        for (t7 = sy * t1, t8 = yi * t5, sx = x, xi = 0; xi < w; ++xi, ++sx) {
          t9 = t7 + sx;
          if (t9 < 0 || t9 >= t3)
            return H.ioore(t2, t9);
          t9 = t2[t9];
          t10 = t8 + xi;
          if (t10 < 0 || t10 >= t6)
            return H.ioore(t4, t10);
          t4[t10] = t9;
        }
      return dst;
    }
  },
  T = {
    InputStream$: function(data, byteOrder, $length, start) {
      var t1, t2;
      if (type$.TypedData._is(data))
        t1 = H.NativeUint8List_NativeUint8List$view(data.buffer, data.byteOffset, data.byteLength);
      else
        t1 = type$.List_int._is(data) ? data : P.List_List$from(type$.Iterable_dynamic._as(data), type$.int);
      t2 = new T.InputStream(t1, start, start, byteOrder);
      t2.__InputStream__length = $length == null ? t1.length : $length;
      return t2;
    },
    InputStreamBase: function InputStreamBase() {
    },
    InputStream: function InputStream(t0, t1, t2, t3) {
      var _ = this;
      _.buffer = t0;
      _.offset = t1;
      _.start = t2;
      _.byteOrder = t3;
      _.__InputStream__length = null;
    }
  },
  Q = {OutputStreamBase: function OutputStreamBase() {
    }, OutputStream: function OutputStream(t0) {
      this._output_stream$_length = 0;
      this._output_stream$_buffer = t0;
    }, PngInfo: function PngInfo() {
    }, InternalPngInfo: function InternalPngInfo(t0, t1) {
      var _ = this;
      _.gamma = _.colorLut = _.transparency = _.palette = _.interlaceMethod = _.filterMethod = _.colorType = _.bits = null;
      _.iCCPName = "";
      _.iCCPData = null;
      _.frames = t0;
      _._idat = t1;
      _.height = _.width = 0;
    }},
  Y = {HuffmanTable: function HuffmanTable() {
      this.__HuffmanTable_table = null;
      this.maxCodeLength = 0;
      this.minCodeLength = 2147483647;
    }},
  S = {Inflate: function Inflate(t0, t1, t2, t3) {
      var _ = this;
      _.__Inflate_input = t0;
      _.inputSet = false;
      _.output = t1;
      _._inflate$_bitBufferLen = _._inflate$_bitBuffer = 0;
      _._fixedLiteralLengthTable = t2;
      _._fixedDistanceTable = t3;
    }},
  G = {
    ExifData$from: function(other) {
      var t1 = type$.int,
        t2 = type$.dynamic;
      t1 = new G.ExifData(other == null ? P.LinkedHashMap_LinkedHashMap$_empty(t1, t2) : P.LinkedHashMap_LinkedHashMap$from(other.data, t1, t2));
      t1.ExifData$from$1(other);
      return t1;
    },
    ExifData: function ExifData(t0) {
      this.rawData = null;
      this.data = t0;
    },
    PngDecoder: function PngDecoder() {
      var _ = this;
      _._info = null;
      _._bitBufferLen = _._bitBuffer = 0;
      _.__PngDecoder__input = null;
      _._progressY = 0;
    },
    PngDecoder_decodeFrame_closure: function PngDecoder_decodeFrame_closure() {
    },
    PngDecoder__getColor__g_set: function PngDecoder__getColor__g_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get: function PngDecoder__getColor__g_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_set: function PngDecoder__getColor__b_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set0: function PngDecoder__getColor__g_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_set: function PngDecoder__getColor__r_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_get: function PngDecoder__getColor__r_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get0: function PngDecoder__getColor__g_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_get: function PngDecoder__getColor__b_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_set: function PngDecoder__getColor__a_set(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set1: function PngDecoder__getColor__g_set1(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get1: function PngDecoder__getColor__g_get1(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_get: function PngDecoder__getColor__a_get(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_set0: function PngDecoder__getColor__a_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_set0: function PngDecoder__getColor__b_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_set2: function PngDecoder__getColor__g_set2(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_set0: function PngDecoder__getColor__r_set0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__r_get0: function PngDecoder__getColor__r_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__g_get2: function PngDecoder__getColor__g_get2(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__b_get0: function PngDecoder__getColor__b_get0(t0) {
      this._box_0 = t0;
    },
    PngDecoder__getColor__a_get0: function PngDecoder__getColor__a_get0(t0) {
      this._box_0 = t0;
    },
    OutputBuffer: function OutputBuffer(t0, t1) {
      this.length = 0;
      this.bigEndian = t0;
      this._buffer = t1;
    },
    copyRotate: function(src, angle, interpolation) {
      var t1, wm1, t2, hm1, dst, t3, t4, t5, t6, t7, y, t8, x, t9, t10, t11, rad, ca, sa, w2, h2, dw2, dh2, c,
        nangle = C.JSNumber_methods.$mod(angle, 360);
      if (C.JSNumber_methods.$mod(nangle, 90) === 0) {
        t1 = src.width;
        wm1 = t1 - 1;
        t2 = src.height;
        hm1 = t2 - 1;
        switch (C.JSNumber_methods._tdivFast$1(nangle, 90)) {
          case 1:
            dst = U.Image$(t2, t1, src.channels, src.exif, src.iccProfile);
            for (t2 = dst.height, t3 = dst.width, t4 = src.data, t5 = t4.length, t6 = dst.data, t7 = t6.length, y = 0; y < t2; ++y)
              for (t8 = y * t3, x = 0; x < t3; ++x) {
                t9 = (hm1 - x) * t1 + y;
                if (t9 < 0 || t9 >= t5)
                  return H.ioore(t4, t9);
                t9 = t4[t9];
                t10 = t8 + x;
                if (t10 < 0 || t10 >= t7)
                  return H.ioore(t6, t10);
                t6[t10] = t9;
              }
            return dst;
          case 2:
            dst = U.Image$(t1, t2, src.channels, src.exif, src.iccProfile);
            for (t2 = dst.height, t3 = dst.width, t4 = src.data, t5 = t4.length, t6 = dst.data, t7 = t6.length, y = 0; y < t2; ++y)
              for (t8 = (hm1 - y) * t1, t9 = y * t3, x = 0; x < t3; ++x) {
                t10 = t8 + (wm1 - x);
                if (t10 < 0 || t10 >= t5)
                  return H.ioore(t4, t10);
                t10 = t4[t10];
                t11 = t9 + x;
                if (t11 < 0 || t11 >= t7)
                  return H.ioore(t6, t11);
                t6[t11] = t10;
              }
            return dst;
          case 3:
            dst = U.Image$(t2, t1, src.channels, src.exif, src.iccProfile);
            for (t2 = dst.height, t3 = dst.width, t4 = src.data, t5 = t4.length, t6 = dst.data, t7 = t6.length, y = 0; y < t2; ++y)
              for (t8 = wm1 - y, t9 = y * t3, x = 0; x < t3; ++x) {
                t10 = x * t1 + t8;
                if (t10 < 0 || t10 >= t5)
                  return H.ioore(t4, t10);
                t10 = t4[t10];
                t11 = t9 + x;
                if (t11 < 0 || t11 >= t7)
                  return H.ioore(t6, t11);
                t6[t11] = t10;
              }
            return dst;
          default:
            return U.Image$from(src);
        }
      }
      rad = nangle * 3.141592653589793 / 180;
      ca = Math.cos(rad);
      sa = Math.sin(rad);
      t1 = src.width;
      t2 = src.height;
      w2 = 0.5 * t1;
      h2 = 0.5 * t2;
      t3 = Math.abs(t1 * ca) + Math.abs(t2 * sa);
      dw2 = 0.5 * t3;
      t2 = Math.abs(t1 * sa) + Math.abs(t2 * ca);
      dh2 = 0.5 * t2;
      dst = U.Image$(C.JSNumber_methods.toInt$0(t3), C.JSNumber_methods.toInt$0(t2), C.Channels_1, src.exif, src.iccProfile);
      for (t1 = dst.height, t2 = dst.width, t3 = dst.data, t4 = t3.length, y = 0; y < t1; ++y)
        for (t5 = y - dh2, t6 = t5 * sa, t5 *= ca, t7 = y * t2, x = 0; x < t2; ++x) {
          t8 = x - dw2;
          c = src.getPixelInterpolate$3(w2 + t8 * ca + t6, h2 - t8 * sa + t5, interpolation);
          t8 = t7 + x;
          if (t8 < 0 || t8 >= t4)
            return H.ioore(t3, t8);
          t3[t8] = c;
        }
      return dst;
    }
  },
  A = {DecodeInfo: function DecodeInfo() {
    }},
  B = {Decoder: function Decoder() {
    }},
  E = {Encoder: function Encoder() {
    }},
  Z = {JpegEncoder: function JpegEncoder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.YTable = t0;
      _.UVTable = t1;
      _.fdtbl_Y = t2;
      _.fdtbl_UV = t3;
      _.__JpegEncoder_UVAC_HT = _.__JpegEncoder_YAC_HT = _.UVDC_HT = _.YDC_HT = null;
      _.bitcode = t4;
      _.category = t5;
      _.outputfDCTQuant = t6;
      _.DU = t7;
      _.YDU = t8;
      _.UDU = t9;
      _.VDU = t10;
      _.RGB_YUV_TABLE = t11;
      _.currentQuality = null;
      _._bytenew = 0;
      _._bytepos = 7;
    },
    InputBuffer$: function(buffer, bigEndian, $length, offset) {
      return new Z.InputBuffer(buffer, offset, $length == null ? buffer.length : offset + $length, offset, true);
    },
    InputBuffer: function InputBuffer(t0, t1, t2, t3, t4) {
      var _ = this;
      _.buffer = t0;
      _.start = t1;
      _.end = t2;
      _.offset = t3;
      _.bigEndian = t4;
    }
  },
  D = {PngFrame: function PngFrame() {
    }, InternalPngFrame: function InternalPngFrame(t0) {
      this.height = this.width = null;
      this._fdat = t0;
    }, ICCProfileData: function ICCProfileData() {
    }},
  U = {
    Image$: function(width, height, channels, exif, iccp) {
      return new U.Image(width, height, channels, 0, 0, 0, C.DisposeMode_1, C.BlendMode_1, new Uint32Array(width * height), G.ExifData$from(exif), iccp);
    },
    Image$from: function(other) {
      var t1 = other.data;
      return new U.Image(other.width, other.height, other.channels, other.xOffset, other.yOffset, other.duration, other.disposeMethod, other.blendMethod, new Uint32Array(t1.subarray(0, H._checkValidRange(0, null, t1.length))), G.ExifData$from(other.exif), other.iccProfile);
    },
    Format: function Format(t0) {
      this._image$_name = t0;
    },
    Channels: function Channels(t0) {
      this._image$_name = t0;
    },
    BlendMode: function BlendMode() {
    },
    DisposeMode: function DisposeMode() {
    },
    Image: function Image(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.width = t0;
      _.height = t1;
      _.channels = t2;
      _.xOffset = t3;
      _.yOffset = t4;
      _.duration = t5;
      _.disposeMethod = t6;
      _.blendMethod = t7;
      _.data = t8;
      _.exif = t9;
      _.iccProfile = t10;
    },
    Image_getPixelLinear__linear: function Image_getPixelLinear__linear(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    Image_getPixelCubic__cubic: function Image_getPixelCubic__cubic() {
    }
  },
  K = {
    ImageException$: function(message) {
      return new K.ImageException(message);
    },
    ImageException: function ImageException(t0) {
      this.message = t0;
    },
    getColor: function(r, g, b, a) {
      return (C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(a, 0, 255)) << 24 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(b, 0, 255)) << 16 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(g, 0, 255)) << 8 | C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(r, 0, 255))) >>> 0;
    },
    alphaBlendColors: function(dst, src, fraction) {
      var a, sr, sg, sb, sa, t1,
        srcAlpha = src >>> 24 & 255;
      if (srcAlpha === 255 && fraction === 255)
        return src;
      a = srcAlpha / 255;
      if (fraction !== 255)
        a *= fraction / 255;
      sr = C.JSNumber_methods.round$0((src & 255) * a);
      sg = C.JSNumber_methods.round$0((src >>> 8 & 255) * a);
      sb = C.JSNumber_methods.round$0((src >>> 16 & 255) * a);
      sa = C.JSNumber_methods.round$0(srcAlpha * a);
      t1 = 1 - a;
      return K.getColor(sr + C.JSNumber_methods.round$0((dst & 255) * t1), sg + C.JSNumber_methods.round$0((dst >>> 8 & 255) * t1), sb + C.JSNumber_methods.round$0((dst >>> 16 & 255) * t1), sa + C.JSNumber_methods.round$0((dst >>> 24 & 255) * t1));
    },
    drawImage: function(dst, src, dstH, dstW, dstX, dstY) {
      var t1, t2, t3, t4, t5, t6, y, t7, t8, t9, x, stepX, t10, srcPixel, pi,
        srcW = src.width,
        srcH = src.height;
      if (dstW == null) {
        dstW = dst.width;
        dstW = dstW < srcW ? dstW : srcW;
      }
      if (dstH == null) {
        dstH = dst.height;
        dstH = dstH < srcH ? dstH : srcH;
      }
      for (t1 = src.data, t2 = t1.length, t3 = dst.width, t4 = dst.height, t5 = dst.data, t6 = t5.length, y = 0; y < dstH; ++y)
        for (t7 = dstY + y, t8 = t7 >= 0, t9 = t7 < t4, t7 *= t3, x = 0; x < dstW; ++x) {
          stepX = C.JSNumber_methods.toInt$0(x * (srcW / dstW));
          t10 = C.JSNumber_methods.toInt$0(y * (srcH / dstH)) * srcW + stepX;
          if (t10 < 0 || t10 >= t2)
            return H.ioore(t1, t10);
          srcPixel = t1[t10];
          t10 = dstX + x;
          if (t10 >= 0 && t10 < t3 && t8 && t9) {
            pi = t7 + t10;
            if (pi < 0 || pi >= t6)
              return H.ioore(t5, pi);
            t5[pi] = K.alphaBlendColors(t5[pi], srcPixel, 255);
          }
        }
      return dst;
    },
    bakeOrientation: function(image) {
      var t1, t2,
        bakedImage = U.Image$from(image);
      if (!image.exif.data.containsKey$1(274) || H._asInt(image.exif.data.$index(0, 274)) === 1)
        return bakedImage;
      bakedImage.exif = new G.ExifData(P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.dynamic));
      for (t1 = image.exif.data.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 !== 274)
          bakedImage.exif.data.$indexSet(0, t2, image.exif.data.$index(0, t2));
      }
      switch (H._asInt(image.exif.data.$index(0, 274))) {
        case 2:
          return N.flipHorizontal(bakedImage);
        case 3:
          switch (C.Flip_2) {
            case C.Flip_0:
              N.flipHorizontal(bakedImage);
              break;
            case C.Flip_1:
              N.flipVertical(bakedImage);
              break;
            case C.Flip_2:
              N.flipVertical(bakedImage);
              N.flipHorizontal(bakedImage);
              break;
          }
          return bakedImage;
        case 4:
          return N.flipHorizontal(G.copyRotate(bakedImage, 180, C.Interpolation_0));
        case 5:
          return N.flipHorizontal(G.copyRotate(bakedImage, 90, C.Interpolation_0));
        case 6:
          return G.copyRotate(bakedImage, 90, C.Interpolation_0);
        case 7:
          return N.flipHorizontal(G.copyRotate(bakedImage, -90, C.Interpolation_0));
        case 8:
          return G.copyRotate(bakedImage, -90, C.Interpolation_0);
      }
      return bakedImage;
    },
    copyResize: function(src, interpolation, width) {
      var t1, t2, height, dst, dy, dx, sData, sw4, t3, t4, y, y1, y0, y2, t5, x, x1, x0, x2, t6, sy, r, g, b, a, np, si, sx, si0, t7, t8, t9, t10, scaleX;
      src = K.bakeOrientation(src);
      t1 = src.height;
      t2 = src.width;
      height = C.JSNumber_methods.toInt$0(width * (t1 / t2));
      if (width <= 0)
        width = C.JSNumber_methods.toInt$0(height * (t2 / t1));
      if (width === t2 && height === t1)
        return U.Image$from(src);
      dst = U.Image$(width, height, src.channels, src.exif, src.iccProfile);
      dy = t1 / height;
      dx = t2 / width;
      if (interpolation === C.Interpolation_3) {
        sData = src.getBytes$0();
        sw4 = t2 * 4;
        for (t1 = dst.data, t2 = dst.width, t3 = t1.length, t4 = sData.length, y = 0; y < height; y = y0) {
          y1 = C.JSNumber_methods.toInt$0(y * dy);
          y0 = y + 1;
          y2 = C.JSNumber_methods.toInt$0(y0 * dy);
          if (y2 === y1)
            ++y2;
          for (t5 = y * t2, x = 0; x < width; x = x0) {
            x1 = C.JSNumber_methods.toInt$0(x * dx);
            x0 = x + 1;
            x2 = C.JSNumber_methods.toInt$0(x0 * dx);
            if (x2 === x1)
              ++x2;
            for (t6 = x1 * 4, sy = y1, r = 0, g = 0, b = 0, a = 0, np = 0; sy < y2; ++sy) {
              si = sy * sw4 + t6;
              for (sx = x1; sx < x2; ++sx, ++np) {
                si0 = si + 1;
                if (si < 0 || si >= t4)
                  return H.ioore(sData, si);
                r += sData[si];
                si = si0 + 1;
                if (si0 < 0 || si0 >= t4)
                  return H.ioore(sData, si0);
                g += sData[si0];
                si0 = si + 1;
                if (si < 0 || si >= t4)
                  return H.ioore(sData, si);
                b += sData[si];
                si = si0 + 1;
                if (si0 < 0 || si0 >= t4)
                  return H.ioore(sData, si0);
                a += sData[si0];
              }
            }
            t6 = C.JSInt_methods.$tdiv(r, np);
            t7 = C.JSInt_methods.$tdiv(g, np);
            t8 = C.JSInt_methods.$tdiv(b, np);
            t9 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(C.JSInt_methods.$tdiv(a, np), 0, 255));
            t8 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t8, 0, 255));
            t7 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t7, 0, 255));
            t6 = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(t6, 0, 255));
            t10 = t5 + x;
            if (t10 < 0 || t10 >= t3)
              return H.ioore(t1, t10);
            t1[t10] = (t9 << 24 | t8 << 16 | t7 << 8 | t6) >>> 0;
          }
        }
      } else if (interpolation === C.Interpolation_0) {
        scaleX = new Int32Array(width);
        for (x = 0; x < width; ++x) {
          t1 = C.JSNumber_methods.toInt$0(x * dx);
          if (x >= width)
            return H.ioore(scaleX, x);
          scaleX[x] = t1;
        }
        for (t1 = src.data, t3 = t1.length, t4 = dst.data, t5 = dst.width, t6 = t4.length, y = 0; y < height; ++y)
          for (t7 = C.JSNumber_methods.toInt$0(y * dy) * t2, t8 = y * t5, x = 0; x < width; ++x) {
            if (x >= width)
              return H.ioore(scaleX, x);
            t9 = t7 + scaleX[x];
            if (t9 < 0 || t9 >= t3)
              return H.ioore(t1, t9);
            t9 = t1[t9];
            t10 = t8 + x;
            if (t10 < 0 || t10 >= t6)
              return H.ioore(t4, t10);
            t4[t10] = t9;
          }
      } else
        for (t1 = dst.data, t2 = dst.width, t3 = t1.length, y = 0; y < height; ++y) {
          y2 = y * dy;
          for (t4 = y * t2, x = 0; x < width; ++x) {
            t5 = src.getPixelInterpolate$3(x * dx, y2, interpolation);
            t6 = t4 + x;
            if (t6 < 0 || t6 >= t3)
              return H.ioore(t1, t6);
            t1[t6] = t5;
          }
        }
      return dst;
    }
  },
  N = {
    flipVertical: function(src) {
      var t1, t2, t3, y, y1, y2, x, t4, t, t5,
        w = src.width,
        h = src.height,
        h2 = C.JSInt_methods._tdivFast$1(h, 2);
      for (t1 = src.data, t2 = t1.length, t3 = h - 1, y = 0; y < h2; ++y) {
        y1 = y * w;
        y2 = (t3 - y) * w;
        for (x = 0; x < w; ++x) {
          t4 = y2 + x;
          if (t4 < 0 || t4 >= t2)
            return H.ioore(t1, t4);
          t = t1[t4];
          t5 = y1 + x;
          if (t5 < 0 || t5 >= t2)
            return H.ioore(t1, t5);
          t1[t4] = t1[t5];
          t1[t5] = t;
        }
      }
      return src;
    },
    flipHorizontal: function(src) {
      var t1, t2, t3, y, y1, x, t4, t, t5,
        w = src.width,
        h = src.height,
        w2 = C.JSInt_methods._tdivFast$1(w, 2);
      for (t1 = w - 1, t2 = src.data, t3 = t2.length, y = 0; y < h; ++y) {
        y1 = y * w;
        for (x = 0; x < w2; ++x) {
          t4 = y1 + (t1 - x);
          if (t4 < 0 || t4 >= t3)
            return H.ioore(t2, t4);
          t = t2[t4];
          t5 = y1 + x;
          if (t5 < 0 || t5 >= t3)
            return H.ioore(t2, t5);
          t2[t4] = t2[t5];
          t2[t5] = t;
        }
      }
      return src;
    },
    Flip: function Flip(t0) {
      this._flip$_name = t0;
    }
  },
  X = {Interpolation: function Interpolation(t0) {
      this._interpolation$_name = t0;
    },
    Vector2D_Vector2D$fromJson: function(json) {
      return new X.Vector2D(P.double_parse(H._asString(json.$index(0, "x"))), P.double_parse(H._asString(json.$index(0, "y"))));
    },
    Vector2D: function Vector2D(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    CompositeLayer: function CompositeLayer(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.angle = t0;
      _.assetPath = t1;
      _.constraints = t2;
      _.position = t3;
      _.scale = t4;
      _.size = t5;
    },
    getCrc32: function(array, crc) {
      var ip, ip0,
        t1 = J.getInterceptor$asx(array),
        len = t1.get$length(array);
      crc ^= 4294967295;
      for (ip = 0; len >= 8;) {
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        ip0 = ip + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
        ip = ip0 + 1;
        crc = C.List_B8J[(crc ^ t1.$index(array, ip0)) & 255] ^ crc >>> 8;
        len -= 8;
      }
      if (len > 0)
        do {
          ip0 = ip + 1;
          crc = C.List_B8J[(crc ^ t1.$index(array, ip)) & 255] ^ crc >>> 8;
          if (--len, len > 0) {
            ip = ip0;
            continue;
          } else
            break;
        } while (true);
      return (crc ^ 4294967295) >>> 0;
    }
  },
  L = {
    main: function() {
      var t1 = type$.nullable_EventTarget._as(self.self),
        t2 = type$.nullable_void_Function_MessageEvent._as(new L.main_closure());
      type$.nullable_void_Function._as(null);
      W._EventStreamSubscription$(t1, "message", t2, false, type$.MessageEvent);
    },
    _composite: function(aspectRatio, data, height, rawLayers, width) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.List_int),
        $async$returnValue, inputImageAspectRatio, croppedWidth, croppedHeight, image, layers, _i, layer, t2, t3, widthFactor, t4, t5, assetWidth, assetDx, assetDy, asset, asset0, rotationOffset, frame, framedImageWidth, t6, t7, t8, t9, t10, t11, t1, $async$temp1;
      var $async$_composite = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = new G.PngDecoder();
              $async$goto = 3;
              return P._asyncAwait(L.getBytes(data), $async$_composite);
            case 3:
              // returning from await.
              t1 = $async$temp1.decodeImage$1($async$result);
              t1.toString;
              inputImageAspectRatio = width / height;
              if (inputImageAspectRatio > aspectRatio) {
                croppedWidth = height * aspectRatio;
                croppedHeight = height;
              } else {
                croppedHeight = inputImageAspectRatio < aspectRatio ? width / aspectRatio : height;
                croppedWidth = width;
              }
              image = R.copyCrop(t1, Math.abs(C.JSNumber_methods._tdivFast$1(croppedWidth - width, 2)), Math.abs(C.JSNumber_methods._tdivFast$1(croppedHeight - height, 2)), C.JSNumber_methods.round$0(croppedWidth), C.JSNumber_methods.round$0(croppedHeight));
              t1 = J.map$1$1$ax(rawLayers, new L._composite_closure(), type$.CompositeLayer);
              layers = P.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
              t1 = layers.length, _i = 0;
            case 4:
              // for condition
              if (!(_i < t1)) {
                // goto after for
                $async$goto = 6;
                break;
              }
              layer = layers[_i];
              $async$temp1 = new G.PngDecoder();
              $async$goto = 7;
              return P._asyncAwait(L.getBytes(layer.assetPath), $async$_composite);
            case 7:
              // returning from await.
              t2 = $async$temp1.decodeImage$1($async$result);
              t2.toString;
              t3 = layer.constraints;
              widthFactor = image.width / t3.x;
              t4 = layer.size;
              t5 = layer.scale;
              assetWidth = C.JSNumber_methods.round$0(t4.x * widthFactor * t5);
              t4 = layer.position;
              assetDx = C.JSNumber_methods.round$0(t4.x * widthFactor * t5);
              assetDy = C.JSNumber_methods.round$0(t4.y * (image.height / t3.y) * t5);
              if (t2.width !== assetWidth)
                asset = K.copyResize(t2, C.Interpolation_2, assetWidth);
              else
                asset = t2;
              t2 = layer.angle;
              if (t2 !== 0) {
                asset0 = G.copyRotate(asset, t2 * 57.29577951308232, C.Interpolation_2);
                rotationOffset = new X.Vector2D((asset0.width - asset.width) / 2, (asset0.height - asset.height) / 2);
                asset = asset0;
              } else
                rotationOffset = C.Vector2D_0_0;
              image = K.drawImage(image, asset, null, null, C.JSNumber_methods.round$0(assetDx - rotationOffset.x), C.JSNumber_methods.round$0(assetDy - rotationOffset.y));
            case 5:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 4;
              break;
            case 6:
              // after for
              $async$temp1 = new G.PngDecoder();
              $async$goto = 8;
              return P._asyncAwait(L.getBytes(aspectRatio < 1 ? "assets/assets/images/photo_frame_mobile_download.png" : "assets/assets/images/photo_frame_download.png"), $async$_composite);
            case 8:
              // returning from await.
              frame = $async$temp1.decodeImage$1($async$result);
              if (frame.width > croppedWidth)
                frame = K.copyResize(frame, C.Interpolation_2, C.JSNumber_methods.round$0(croppedWidth + 16));
              framedImageWidth = frame.width - 16;
              image = K.drawImage(frame, image, C.JSNumber_methods.round$0(framedImageWidth / aspectRatio), framedImageWidth, 8, 8);
              t1 = new Uint8Array(64);
              t2 = new Uint8Array(64);
              t3 = new Float32Array(64);
              t4 = new Float32Array(64);
              t5 = P.List_List$filled(65535, null, false, type$.nullable_List_int);
              t6 = type$.nullable_int;
              t7 = P.List_List$filled(65535, null, false, t6);
              t8 = P.List_List$filled(64, null, false, t6);
              t6 = P.List_List$filled(64, null, false, t6);
              t9 = new Float32Array(64);
              t10 = new Float32Array(64);
              t11 = new Float32Array(64);
              t1 = new Z.JpegEncoder(t1, t2, t3, t4, t5, t7, t8, t6, t9, t10, t11, new Int32Array(2048));
              t1.set$YDC_HT(t1._computeHuffmanTbl$2(C.List_F1L, C.List_UiL));
              t1.set$UVDC_HT(t1._computeHuffmanTbl$2(C.List_F1L0, C.List_UiL));
              t2 = type$.List_nullable_List_int;
              t1.set$__JpegEncoder_YAC_HT(t2._as(t1._computeHuffmanTbl$2(C.List_F1L1, C.List_G61)));
              t1.set$__JpegEncoder_UVAC_HT(t2._as(t1._computeHuffmanTbl$2(C.List_F1L2, C.List_AKW)));
              t1._initCategoryNumber$0();
              t1._initRGBYUVTable$0();
              t1.setQuality$1(100);
              $async$returnValue = t1.encodeImage$1(image);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_composite, $async$completer);
    },
    getBytes: function(path) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Uint8List),
        $async$returnValue, t1, t2, buffer, $async$temp1, $async$temp2, $async$temp3;
      var $async$getBytes = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = self.self;
              t2 = type$.dynamic;
              $async$temp1 = type$.nullable_ByteBuffer;
              $async$temp2 = P;
              $async$temp3 = type$.Body;
              $async$goto = 4;
              return P._asyncAwait(P.promiseToFuture(t1.fetch(path, null), t2), $async$getBytes);
            case 4:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait($async$temp2.promiseToFuture($async$temp3._as($async$result).arrayBuffer(), t2), $async$getBytes);
            case 3:
              // returning from await.
              buffer = $async$temp1._as($async$result);
              t1 = buffer == null ? null : H.NativeUint8List_NativeUint8List$view(buffer, 0, null);
              if (t1 == null)
                t1 = new Uint8Array(0);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$getBytes, $async$completer);
    },
    main_closure: function main_closure() {
    },
    main__closure: function main__closure() {
    },
    main__closure0: function main__closure0() {
    },
    _composite_closure: function _composite_closure() {
    }
  };
  var holders = [C, H, J, P, W, R, T, Q, Y, S, G, A, B, E, Z, D, U, K, N, X, L];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    addAll$1: function(receiver, collection) {
      var t1, _i;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = collection.length, _i = 0; _i < t1; ++_i)
        receiver.push(collection[_i]);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], H._arrayInstanceType(receiver));
      return H.setRuntimeTypeInfo(receiver.slice(start, end), H._arrayInstanceType(receiver));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (newLength > receiver.length)
        H._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this._current);
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = C.JSInt_methods.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || false)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {$isint: 1};
  J.JSNumNotInt.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      return receiver + other;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isString: 1
  };
  H.LateError.prototype = {
    toString$0: function(_) {
      var t1 = "LateInitializationError: " + this._message;
      return t1;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1: function(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    toList$1$growable: function(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this.__internal$_current);
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  H.FixedLengthListMixin.prototype = {};
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H._asInt(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + this.__js_helper$_message;
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0: function(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this.__js_helper$_target === other.__js_helper$_target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(type$.Object._as(receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    containsKey$1: function(key) {
      var nums;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return this._containsTableEntry$2(nums, key);
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this._strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _newLinkedCell$2: function(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this.__js_helper$_length;
      _this._modifications = _this._modifications + 1 & 67108863;
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.$ti._precomputed1._as(this.__js_helper$_current);
    },
    moveNext$0: function() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    }
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 9
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 10
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H._asString(tag));
    },
    $signature: 11
  };
  H.NativeByteBuffer.prototype = {$isNativeByteBuffer: 1, $isByteBuffer: 1};
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1,
    $isTypedData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asDouble(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H._asInt(index);
      H._asInt(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var targetLength, count, sourceLength, source;
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        targetLength = receiver.length;
        this._checkPosition$3(receiver, start, targetLength, "start");
        this._checkPosition$3(receiver, end, targetLength, "end");
        if (start > end)
          H.throwExpression(P.RangeError$range(start, 0, end, null, null));
        count = end - start;
        if (skipCount < 0)
          H.throwExpression(P.ArgumentError$(skipCount));
        sourceLength = iterable.length;
        if (sourceLength - skipCount < count)
          H.throwExpression(P.StateError$("Not enough elements"));
        source = skipCount !== 0 || sourceLength !== count ? iterable.subarray(skipCount, skipCount + count) : iterable;
        receiver.set(source, start);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isIterable: 1,
    $isList: 1
  };
  H.NativeFloat32List.prototype = {$isFloat32List: 1};
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1: function(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1: function(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Error.prototype = {
    toString$0: function(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 5
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 12
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 6
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 6
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2: function(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    }
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 3
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 13
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H._asInt(errorCode), result);
    },
    $signature: 14
  };
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      var t1;
      H.checkNotNullable(error, "error", type$.Object);
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = P.AsyncError_defaultStackTrace(error);
      t1._asyncCompleteError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    }
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if (t2._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = this.$ti._eval$1("2/"),
        t5 = this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        return t4._as(t5.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace));
      else
        return t4._as(t5.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2));
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2: function(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new P._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0: function() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1: function(source) {
      var e, s, exception, _this = this;
      _this._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(_this), new P._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, t1, _this = this;
      type$.StackTrace._as(stackTrace);
      listeners = _this._removeListeners$0();
      t1 = P.AsyncError$(error, stackTrace);
      _this._state = 8;
      _this._resultOrListeners = t1;
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1: function(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if (value._state === 8) {
          _this._state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__chainFuture_closure(_this, value)));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      this._state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new P._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state = 0;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 5
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 15
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0: function() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && completeResult._state >= 4) {
        if (completeResult._state === 8) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 16
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new P.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new P.Stream_length_closure0(t1, future));
      W._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      this.$this.$ti._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature: function() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      var t1 = this.future,
        t2 = t1.$ti,
        t3 = t2._eval$1("1/")._as(this._box_0.count),
        listeners = t1._removeListeners$0();
      t2._precomputed1._as(t3);
      t1._state = 4;
      t1._resultOrListeners = t3;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P._StreamIterator.prototype = {};
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error = type$.Object._as(H.wrapException(this.error));
      error.stack = this.stackTrace.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    run$1$1: function(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature: function() {
      return this.T._eval$1("~(0)");
    }
  };
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 7
  };
  P.ListBase.prototype = {$isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.instanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      if (otherStart + $length > otherList.length)
        throw H.wrapException(P.StateError$("Too few elements"));
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = otherStart + i;
          if (t1 < 0 || t1 >= otherList.length)
            return H.ioore(otherList, t1);
          this.$indexSet(receiver, start + i, otherList[t1]);
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = otherStart + i;
          if (t1 < 0 || t1 >= otherList.length)
            return H.ioore(otherList, t1);
          this.$indexSet(receiver, start + i, otherList[t1]);
        }
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 17
  };
  P.MapMixin.prototype = {
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && true;
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this)),
        t1 = y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      return t1;
    }
  };
  P.Error.prototype = {
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      if (H._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = "UnimplementedError: " + this.message;
      return t1;
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = "Reading static variable '" + this.variableName + "' during its initialization";
      return t1;
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        source = this.source;
      if (typeof source == "string") {
        if (source.length > 78)
          source = C.JSString_methods.substring$2(source, 0, 75) + "...";
        return report + "\n" + source;
      } else
        return report;
    }
  };
  P.Iterable.prototype = {
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(C.JSNull_methods, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0: function(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  W.Blob.prototype = {$isBlob: 1};
  W.Body.prototype = {$isBody: 1};
  W.DedicatedWorkerGlobalScope.prototype = {
    postMessage$2: function(receiver, message, transfer) {
      type$.nullable_List_Object._as(transfer);
      receiver.postMessage(new P._StructuredCloneDart2Js([], []).walk$1(message));
      return;
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {$isMessagePort: 1};
  W.WorkerGlobalScope.prototype = {};
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {};
  W._EventStreamSubscription.prototype = {};
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 18
  };
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var slot, t2, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof P.DateTime)
        return new Date(e._value);
      if (type$.File._is(e))
        return e;
      if (type$.Blob._is(e))
        return e;
      if (type$.NativeByteBuffer._is(e) || type$.NativeTypedData._is(e) || type$.MessagePort._is(e))
        return e;
      if (type$.Map_dynamic_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        e.forEach$1(0, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (type$.List_dynamic._is(e)) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (type$.JSObject._is(e)) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 7
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 8
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, t2, l, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (H._isBool(e))
        return e;
      if (typeof e == "number")
        return e;
      if (typeof e == "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        H.checkNotNullable(true, "isUtc", type$.bool);
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, type$.dynamic);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = type$.dynamic;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 19
  };
  P._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      type$.dynamic_Function_dynamic_dynamic._as(action);
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.NullRejectionException.prototype = {
    toString$0: function(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 3
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      if (e == null)
        return this.completer.completeError$1(new P.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 3
  };
  R.ArchiveException.prototype = {};
  T.InputStreamBase.prototype = {};
  T.InputStream.prototype = {
    get$length: function(_) {
      return this.get$_input_stream$_length() - (this.offset - this.start);
    },
    get$isEOS: function() {
      return this.offset >= this.start + this.get$_input_stream$_length();
    },
    readByte$0: function() {
      var t1 = this.buffer,
        t2 = this.offset++;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    readUint32$0: function() {
      var b1, b2, b3, b4, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b1 = t2 & 255;
      t2 = _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b2 = t3 & 255;
      t3 = _this.offset = t2 + 1;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      b3 = t2 & 255;
      _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      b4 = t3 & 255;
      if (_this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    get$_input_stream$_length: function() {
      var t1 = this.__InputStream__length;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t1;
    }
  };
  Q.OutputStreamBase.prototype = {};
  Q.OutputStream.prototype = {
    get$length: function(_) {
      return this._output_stream$_length;
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.List_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this._output_stream$_length, t2 = t1 + len, t3 = _this._output_stream$_buffer, t4 = t3.length, t2 > t4;)
        _this._output_stream$_expandBuffer$1(t2 - t4);
      C.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this._output_stream$_length += len;
    },
    writeInputStream$1: function(stream) {
      var t2, t3, t4, t5, t6, t7, _this = this,
        t1 = stream.start;
      while (true) {
        t2 = _this._output_stream$_length;
        t3 = stream.__InputStream__length;
        t4 = t3 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t3;
        t5 = stream.offset - t1;
        t6 = _this._output_stream$_buffer;
        t7 = t6.length;
        if (!(t2 + (t4 - t5) > t7))
          break;
        _this._output_stream$_expandBuffer$1(t2 + (t3 - t5) - t7);
      }
      C.NativeUint8List_methods.setRange$4(t6, t2, t2 + stream.get$length(stream), stream.buffer, stream.offset);
      _this._output_stream$_length = _this._output_stream$_length + stream.get$length(stream);
    },
    subset$2: function(start, end) {
      var _this = this;
      if (start < 0)
        start = _this._output_stream$_length + start;
      if (end == null)
        end = _this._output_stream$_length;
      else if (end < 0)
        end = _this._output_stream$_length + end;
      return H.NativeUint8List_NativeUint8List$view(_this._output_stream$_buffer.buffer, start, end - start);
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _output_stream$_expandBuffer$1: function(required) {
      var blockSize = required != null ? required > 32768 ? required : 32768 : 32768,
        t1 = this._output_stream$_buffer,
        t2 = t1.length,
        newBuffer = new Uint8Array((t2 + blockSize) * 2);
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
      this._output_stream$_buffer = newBuffer;
    },
    _output_stream$_expandBuffer$0: function() {
      return this._output_stream$_expandBuffer$1(null);
    }
  };
  Y.HuffmanTable.prototype = {
    get$table: function() {
      var t1 = this.__HuffmanTable_table;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("table")) : t1;
    },
    HuffmanTable$1: function(lengths) {
      var i, t1, size, bitLength, code, skip, rtemp, reversed, j, t2, t3, _this = this,
        listSize = lengths.length;
      for (i = 0; i < listSize; ++i) {
        t1 = lengths[i];
        if (t1 > _this.maxCodeLength)
          _this.maxCodeLength = t1;
        if (t1 < _this.minCodeLength)
          _this.minCodeLength = t1;
      }
      size = C.JSInt_methods._shlPositive$1(1, _this.maxCodeLength);
      _this.__HuffmanTable_table = new Uint32Array(size);
      for (bitLength = 1, code = 0, skip = 2; bitLength <= _this.maxCodeLength;) {
        for (t1 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= lengths.length)
            return H.ioore(lengths, i);
          if (lengths[i] === bitLength) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t2 = (t1 | i) >>> 0, j = reversed; j < size; j += skip) {
              t3 = _this.__HuffmanTable_table;
              if (t3 == null)
                t3 = H.throwExpression(H.LateError$fieldNI("table"));
              if (j < 0 || j >= t3.length)
                return H.ioore(t3, j);
              t3[j] = t2;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    }
  };
  S.Inflate.prototype = {
    get$input: function() {
      return this.__Inflate_input;
    },
    _inflate$0: function() {
      var t1, t2, t3, t4, _this = this;
      _this._inflate$_bitBufferLen = _this._inflate$_bitBuffer = 0;
      if (!_this.inputSet)
        return;
      t1 = _this.__Inflate_input;
      t2 = t1.start;
      while (true) {
        t3 = t1.offset;
        t4 = t1.__InputStream__length;
        if (!(t3 < t2 + (t4 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t4)))
          break;
        if (!_this._parseBlock$0())
          break;
      }
    },
    _parseBlock$0: function() {
      var hdr, btype, len, t1, t2, t3, bytes, _this = this;
      if (_this.get$input().get$isEOS())
        return false;
      hdr = _this._inflate$_readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          _this._inflate$_bitBufferLen = _this._inflate$_bitBuffer = 0;
          len = _this._inflate$_readBits$1(16);
          t1 = _this._inflate$_readBits$1(16);
          if (len !== 0 && len !== (t1 ^ 65535) >>> 0)
            H.throwExpression(R.ArchiveException$("Invalid uncompressed block header"));
          t1 = _this.get$input();
          if (len > t1.get$length(t1))
            H.throwExpression(R.ArchiveException$("Input buffer is broken"));
          t1 = _this.get$input();
          t2 = t1.offset;
          t3 = t1.start;
          bytes = T.InputStream$(t1.buffer, t1.byteOrder, len, t2 - t3 + t3);
          t1.offset = t1.offset + bytes.get$length(bytes);
          _this.output.writeInputStream$1(bytes);
          break;
        case 1:
          _this._decodeHuffman$2(_this._fixedLiteralLengthTable, _this._fixedDistanceTable);
          break;
        case 2:
          _this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(R.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _inflate$_readBits$1: function($length) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      if ($length === 0)
        return 0;
      for (t1 = _this.__Inflate_input, t2 = t1.buffer, t3 = t1.start; t4 = _this._inflate$_bitBufferLen, t4 < $length;) {
        t5 = t1.offset;
        t6 = t1.__InputStream__length;
        if (t5 >= t3 + (t6 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t6))
          throw H.wrapException(R.ArchiveException$("input buffer is broken"));
        t1.offset = t5 + 1;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        t5 = t2[t5];
        _this._inflate$_bitBuffer = (_this._inflate$_bitBuffer | C.JSInt_methods.$shl(t5, t4)) >>> 0;
        _this._inflate$_bitBufferLen = t4 + 8;
      }
      t1 = _this._inflate$_bitBuffer;
      t2 = C.JSInt_methods._shlPositive$1(1, $length);
      _this._inflate$_bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, $length);
      _this._inflate$_bitBufferLen = t4 - $length;
      return (t1 & t2 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var t1, t2, t3, t4, t5, t6, codeWithLength, codeLength, _this = this,
        codeTable = table.get$table(),
        maxCodeLength = table.maxCodeLength;
      for (t1 = _this.__Inflate_input, t2 = t1.buffer, t3 = t1.start; t4 = _this._inflate$_bitBufferLen, t4 < maxCodeLength;) {
        t5 = t1.offset;
        t6 = t1.__InputStream__length;
        if (t5 >= t3 + (t6 == null ? H.throwExpression(H.LateError$fieldNI("_length")) : t6))
          break;
        t1.offset = t5 + 1;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        t5 = t2[t5];
        _this._inflate$_bitBuffer = (_this._inflate$_bitBuffer | C.JSInt_methods.$shl(t5, t4)) >>> 0;
        _this._inflate$_bitBufferLen = t4 + 8;
      }
      t1 = _this._inflate$_bitBuffer;
      t2 = (t1 & C.JSInt_methods._shlPositive$1(1, maxCodeLength) - 1) >>> 0;
      if (t2 >= codeTable.length)
        return H.ioore(codeTable, t2);
      codeWithLength = codeTable[t2];
      codeLength = codeWithLength >>> 16;
      _this._inflate$_bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, codeLength);
      _this._inflate$_bitBufferLen = t4 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var i, t1, t2, codeLengthsTable, litlenLengths, distLengths, litlen, dist, _this = this,
        numLitLengthCodes = _this._inflate$_readBits$1(5) + 257,
        numDistanceCodes = _this._inflate$_readBits$1(5) + 1,
        numCodeLengths = _this._inflate$_readBits$1(4) + 4,
        codeLengths = new Uint8Array(19);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t1 = C.List_uSC[i];
        t2 = _this._inflate$_readBits$1(3);
        if (t1 >= 19)
          return H.ioore(codeLengths, t1);
        codeLengths[t1] = t2;
      }
      codeLengthsTable = new Y.HuffmanTable();
      codeLengthsTable.HuffmanTable$1(codeLengths);
      litlenLengths = new Uint8Array(numLitLengthCodes);
      distLengths = new Uint8Array(numDistanceCodes);
      litlen = _this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = _this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      t1 = new Y.HuffmanTable();
      t1.HuffmanTable$1(litlen);
      t2 = new Y.HuffmanTable();
      t2.HuffmanTable$1(dist);
      _this._decodeHuffman$2(t1, t2);
    },
    _decodeHuffman$2: function(litlen, dist) {
      var t1, code, t2, t3, ti, codeLength, distCode, distance, _this = this;
      for (t1 = _this.output; true;) {
        code = _this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(R.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          if (t1._output_stream$_length === t1._output_stream$_buffer.length)
            t1._output_stream$_expandBuffer$0();
          t2 = t1._output_stream$_buffer;
          t3 = t1._output_stream$_length++;
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0)
          return H.ioore(C.List_qQn, ti);
        codeLength = C.List_qQn[ti] + _this._inflate$_readBits$1(C.List_eea[ti]);
        distCode = _this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          distance = C.List_i3t[distCode] + _this._inflate$_readBits$1(C.List_X3d0[distCode]);
          for (t2 = -distance; codeLength > distance;) {
            t1.writeBytes$1(t1.subset$1(t2));
            codeLength -= distance;
          }
          if (codeLength === distance)
            t1.writeBytes$1(t1.subset$1(t2));
          else
            t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
        } else
          throw H.wrapException(R.ArchiveException$("Illegal unused distance symbol"));
      }
      for (t1 = _this.__Inflate_input; t2 = _this._inflate$_bitBufferLen, t2 >= 8;) {
        _this._inflate$_bitBufferLen = t2 - 8;
        if (--t1.offset < 0)
          t1.offset = 0;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0, _this = this;
      type$.List_int._as(lengths);
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = _this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + _this._inflate$_readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + _this._inflate$_readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + _this._inflate$_readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(R.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    }
  };
  G.ExifData.prototype = {
    ExifData$from$1: function(other) {
      var _length, _list, i, t1;
      if (other != null && other.rawData != null) {
        _length = other.rawData.length;
        _list = H.setRuntimeTypeInfo(new Array(_length), type$.JSArray_Uint8List);
        for (i = 0; i < _length; ++i) {
          t1 = other.rawData;
          if (i >= t1.length)
            return H.ioore(t1, i);
          _list[i] = t1[i].sublist$1(0, 0);
        }
        this.set$rawData(_list);
      }
    },
    set$rawData: function(rawData) {
      this.rawData = type$.nullable_List_Uint8List._as(rawData);
    }
  };
  A.DecodeInfo.prototype = {};
  B.Decoder.prototype = {};
  E.Encoder.prototype = {};
  Z.JpegEncoder.prototype = {
    setQuality$1: function(quality) {
      quality = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(quality, 0, 100));
      if (this.currentQuality === quality)
        return;
      this._initQuantTables$1(quality < 50 ? C.JSNumber_methods.floor$0(5000 / quality) : C.JSInt_methods.floor$0(200 - quality * 2));
      this.currentQuality = quality;
    },
    encodeImage$1: function(image) {
      var t1, t2, imageData, quadWidth, t3, t4, t5, t6, t7, t8, DCY, DCU, DCV, y, t9, t10, x, start, pos, row, col, p, t11, p0, r, g, b, t12, t13, _this = this,
        fp = new G.OutputBuffer(true, new Uint8Array(8192));
      fp.writeByte$1(255);
      fp.writeByte$1(216);
      fp.writeByte$1(255);
      fp.writeByte$1(224);
      fp.writeUint16$1(16);
      fp.writeByte$1(74);
      fp.writeByte$1(70);
      fp.writeByte$1(73);
      fp.writeByte$1(70);
      fp.writeByte$1(0);
      fp.writeByte$1(1);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeUint16$1(1);
      fp.writeUint16$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(0);
      _this._writeAPP1$2(fp, image.exif);
      _this._writeDQT$1(fp);
      t1 = image.width;
      t2 = image.height;
      fp.writeByte$1(255);
      fp.writeByte$1(192);
      fp.writeUint16$1(17);
      fp.writeByte$1(8);
      fp.writeUint16$1(t2);
      fp.writeUint16$1(t1);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      fp.writeByte$1(17);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(1);
      _this._writeDHT$1(fp);
      fp.writeByte$1(255);
      fp.writeByte$1(218);
      fp.writeUint16$1(12);
      fp.writeByte$1(3);
      fp.writeByte$1(1);
      fp.writeByte$1(0);
      fp.writeByte$1(2);
      fp.writeByte$1(17);
      fp.writeByte$1(3);
      fp.writeByte$1(17);
      fp.writeByte$1(0);
      fp.writeByte$1(63);
      fp.writeByte$1(0);
      _this._bytenew = 0;
      _this._bytepos = 7;
      imageData = image.getBytes$0();
      quadWidth = t1 * 4;
      for (t1 = _this.VDU, t3 = _this.fdtbl_UV, t4 = _this.UDU, t5 = _this.YDU, t6 = _this.fdtbl_Y, t7 = imageData.length, t8 = _this.RGB_YUV_TABLE, DCY = 0, DCU = 0, DCV = 0, y = 0; y < t2;) {
        for (t9 = y + 1, t10 = quadWidth * y, x = 0; x < quadWidth;) {
          start = t10 + x;
          for (pos = 0; pos < 64; ++pos) {
            row = pos >>> 3;
            col = (pos & 7) * 4;
            p = start + row * quadWidth + col;
            if (y + row >= t2)
              p -= quadWidth * (t9 + row - t2);
            t11 = x + col;
            if (t11 >= quadWidth)
              p -= t11 - quadWidth + 4;
            p0 = p + 1;
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            r = imageData[p];
            p = p0 + 1;
            if (p0 < 0 || p0 >= t7)
              return H.ioore(imageData, p0);
            g = imageData[p0];
            if (p < 0 || p >= t7)
              return H.ioore(imageData, p);
            b = imageData[p];
            if (r >= 2048)
              return H.ioore(t8, r);
            t11 = t8[r];
            t12 = g + 256;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t13 = b + 512;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t5[pos] = C.JSInt_methods._shrOtherPositive$1(t11 + t12 + t8[t13], 16) - 128;
            t13 = r + 768;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t13 = t8[t13];
            t12 = g + 1024;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t11 = b + 1280;
            if (t11 >= 2048)
              return H.ioore(t8, t11);
            t4[pos] = C.JSInt_methods._shrOtherPositive$1(t13 + t12 + t8[t11], 16) - 128;
            t11 = r + 1280;
            if (t11 >= 2048)
              return H.ioore(t8, t11);
            t11 = t8[t11];
            t12 = g + 1536;
            if (t12 >= 2048)
              return H.ioore(t8, t12);
            t12 = t8[t12];
            t13 = b + 1792;
            if (t13 >= 2048)
              return H.ioore(t8, t13);
            t1[pos] = C.JSInt_methods._shrOtherPositive$1(t11 + t12 + t8[t13], 16) - 128;
          }
          t11 = _this.YDC_HT;
          t12 = _this.__JpegEncoder_YAC_HT;
          DCY = _this._processDU$6(fp, t5, t6, DCY, t11, t12 == null ? H.throwExpression(H.LateError$fieldNI("YAC_HT")) : t12);
          t11 = _this.UVDC_HT;
          t12 = _this.__JpegEncoder_UVAC_HT;
          DCU = _this._processDU$6(fp, t4, t3, DCU, t11, t12 == null ? H.throwExpression(H.LateError$fieldNI("UVAC_HT")) : t12);
          t11 = _this.UVDC_HT;
          t12 = _this.__JpegEncoder_UVAC_HT;
          DCV = _this._processDU$6(fp, t1, t3, DCV, t11, t12 == null ? H.throwExpression(H.LateError$fieldNI("UVAC_HT")) : t12);
          x += 32;
        }
        y += 8;
      }
      t1 = _this._bytepos;
      if (t1 >= 0) {
        ++t1;
        _this._writeBits$2(fp, H.setRuntimeTypeInfo([C.JSInt_methods.$shl(1, t1) - 1, t1], type$.JSArray_int));
      }
      fp.writeByte$1(255);
      fp.writeByte$1(217);
      return H.NativeUint8List_NativeUint8List$view(fp._buffer.buffer, 0, fp.length);
    },
    _initQuantTables$1: function(sf) {
      var t1, i, t, t2, j, u, t3, t4, k, row, col, t5, t6, t7, t8, _this = this;
      for (t1 = _this.YTable, i = 0; i < 64; ++i) {
        t = C.JSNumber_methods.floor$0((C.List_kcl0[i] * sf + 50) / 100);
        if (t < 1)
          t = 1;
        else if (t > 255)
          t = 255;
        t2 = C.List_kcl[i];
        if (t2 >= 64)
          return H.ioore(t1, t2);
        t1[t2] = t;
      }
      for (t2 = _this.UVTable, j = 0; j < 64; ++j) {
        u = C.JSNumber_methods.floor$0((C.List_kcl1[j] * sf + 50) / 100);
        if (u < 1)
          u = 1;
        else if (u > 255)
          u = 255;
        t3 = C.List_kcl[j];
        if (t3 >= 64)
          return H.ioore(t2, t3);
        t2[t3] = u;
      }
      for (t3 = _this.fdtbl_Y, t4 = _this.fdtbl_UV, k = 0, row = 0; row < 8; ++row)
        for (col = 0; col < 8; ++col) {
          if (k < 0 || k >= 64)
            return H.ioore(C.List_kcl, k);
          t5 = C.List_kcl[k];
          if (t5 >= 64)
            return H.ioore(t1, t5);
          t6 = t1[t5];
          t7 = C.List_K2a[row];
          t8 = C.List_K2a[col];
          t3[k] = 1 / (t6 * t7 * t8 * 8);
          t4[k] = 1 / (t2[t5] * t7 * t8 * 8);
          ++k;
        }
    },
    _computeHuffmanTbl$2: function(nrcodes, std_table) {
      var HT, t2, codevalue, pos_in_table, k, j, index,
        t1 = type$.List_int;
      t1._as(nrcodes);
      t1._as(std_table);
      t1 = type$.JSArray_int;
      HT = H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([], t1)], type$.JSArray_nullable_List_int);
      for (t2 = std_table.length, codevalue = 0, pos_in_table = 0, k = 1; k <= 16; ++k) {
        for (j = 1; j <= nrcodes[k]; ++j) {
          if (pos_in_table < 0 || pos_in_table >= t2)
            return H.ioore(std_table, pos_in_table);
          index = std_table[pos_in_table];
          if (HT.length <= index)
            C.JSArray_methods.set$length(HT, index + 1);
          C.JSArray_methods.$indexSet(HT, index, H.setRuntimeTypeInfo([codevalue, k], t1));
          ++pos_in_table;
          ++codevalue;
        }
        codevalue *= 2;
      }
      return HT;
    },
    _initCategoryNumber$0: function() {
      var t1, t2, t3, nrlower, nrupper, cat, nr, t4, nrneg, t5, t6;
      for (t1 = this.category, t2 = this.bitcode, t3 = type$.JSArray_int, nrlower = 1, nrupper = 2, cat = 1; cat <= 15; ++cat) {
        for (nr = nrlower; nr < nrupper; ++nr) {
          t4 = 32767 + nr;
          C.JSArray_methods.$indexSet(t1, t4, cat);
          C.JSArray_methods.$indexSet(t2, t4, H.setRuntimeTypeInfo([nr, cat], t3));
        }
        for (t4 = nrupper - 1, nrneg = -t4, t5 = -nrlower; nrneg <= t5; ++nrneg) {
          t6 = 32767 + nrneg;
          C.JSArray_methods.$indexSet(t1, t6, cat);
          C.JSArray_methods.$indexSet(t2, t6, H.setRuntimeTypeInfo([t4 + nrneg, cat], t3));
        }
        nrlower = nrlower << 1 >>> 0;
        nrupper = nrupper << 1 >>> 0;
      }
    },
    _initRGBYUVTable$0: function() {
      var t1, i;
      for (t1 = this.RGB_YUV_TABLE, i = 0; i < 256; ++i) {
        t1[i] = 19595 * i;
        t1[i + 256] = 38470 * i;
        t1[i + 512] = 7471 * i + 32768;
        t1[i + 768] = -11059 * i;
        t1[i + 1024] = -21709 * i;
        t1[i + 1280] = 32768 * i + 8421375;
        t1[i + 1536] = -27439 * i;
        t1[i + 1792] = -5329 * i;
      }
    },
    _fDCTQuant$2: function(data, fdtbl) {
      var dataOff, i, d0, d1, t2, d2, t3, d3, t4, d4, t5, d5, t6, d6, t7, d7, tmp0, tmp7, tmp1, tmp6, tmp2, tmp5, tmp3, tmp10, tmp13, tmp11, z1, tmp12, z5, z2, z4, z3, z11, z13, tmp0p2, tmp7p2, tmp1p2, tmp6p2, tmp2p2, tmp5p2, tmp3p2, tmp10p2, tmp13p2, tmp11p2, z1p2, tmp12p2, z5p2, z2p2, z4p2, z3p2, z11p2, z13p2, fDCTQuant,
        t1 = type$.List_double;
      t1._as(data);
      t1._as(fdtbl);
      for (dataOff = 0, i = 0; i < 8; ++i) {
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        d0 = data[dataOff];
        t1 = dataOff + 1;
        if (t1 >= 64)
          return H.ioore(data, t1);
        d1 = data[t1];
        t2 = dataOff + 2;
        if (t2 >= 64)
          return H.ioore(data, t2);
        d2 = data[t2];
        t3 = dataOff + 3;
        if (t3 >= 64)
          return H.ioore(data, t3);
        d3 = data[t3];
        t4 = dataOff + 4;
        if (t4 >= 64)
          return H.ioore(data, t4);
        d4 = data[t4];
        t5 = dataOff + 5;
        if (t5 >= 64)
          return H.ioore(data, t5);
        d5 = data[t5];
        t6 = dataOff + 6;
        if (t6 >= 64)
          return H.ioore(data, t6);
        d6 = data[t6];
        t7 = dataOff + 7;
        if (t7 >= 64)
          return H.ioore(data, t7);
        d7 = data[t7];
        tmp0 = d0 + d7;
        tmp7 = d0 - d7;
        tmp1 = d1 + d6;
        tmp6 = d1 - d6;
        tmp2 = d2 + d5;
        tmp5 = d2 - d5;
        tmp3 = d3 + d4;
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        data[dataOff] = tmp10 + tmp11;
        if (t4 >= 64)
          return H.ioore(data, t4);
        data[t4] = tmp10 - tmp11;
        z1 = (tmp1 - tmp2 + tmp13) * 0.707106781;
        if (t2 >= 64)
          return H.ioore(data, t2);
        data[t2] = tmp13 + z1;
        if (t6 >= 64)
          return H.ioore(data, t6);
        data[t6] = tmp13 - z1;
        tmp10 = d3 - d4 + tmp5;
        tmp12 = tmp6 + tmp7;
        z5 = (tmp10 - tmp12) * 0.382683433;
        z2 = 0.5411961 * tmp10 + z5;
        z4 = 1.306562965 * tmp12 + z5;
        z3 = (tmp5 + tmp6) * 0.707106781;
        z11 = tmp7 + z3;
        z13 = tmp7 - z3;
        if (t5 >= 64)
          return H.ioore(data, t5);
        data[t5] = z13 + z2;
        if (t3 >= 64)
          return H.ioore(data, t3);
        data[t3] = z13 - z2;
        if (t1 >= 64)
          return H.ioore(data, t1);
        data[t1] = z11 + z4;
        if (t7 >= 64)
          return H.ioore(data, t7);
        data[t7] = z11 - z4;
        dataOff += 8;
      }
      for (dataOff = 0, i = 0; i < 8; ++i) {
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        d0 = data[dataOff];
        t1 = dataOff + 8;
        if (t1 >= 64)
          return H.ioore(data, t1);
        d1 = data[t1];
        t2 = dataOff + 16;
        if (t2 >= 64)
          return H.ioore(data, t2);
        d2 = data[t2];
        t3 = dataOff + 24;
        if (t3 >= 64)
          return H.ioore(data, t3);
        d3 = data[t3];
        t4 = dataOff + 32;
        if (t4 >= 64)
          return H.ioore(data, t4);
        d4 = data[t4];
        t5 = dataOff + 40;
        if (t5 >= 64)
          return H.ioore(data, t5);
        d5 = data[t5];
        t6 = dataOff + 48;
        if (t6 >= 64)
          return H.ioore(data, t6);
        d6 = data[t6];
        t7 = dataOff + 56;
        if (t7 >= 64)
          return H.ioore(data, t7);
        d7 = data[t7];
        tmp0p2 = d0 + d7;
        tmp7p2 = d0 - d7;
        tmp1p2 = d1 + d6;
        tmp6p2 = d1 - d6;
        tmp2p2 = d2 + d5;
        tmp5p2 = d2 - d5;
        tmp3p2 = d3 + d4;
        tmp10p2 = tmp0p2 + tmp3p2;
        tmp13p2 = tmp0p2 - tmp3p2;
        tmp11p2 = tmp1p2 + tmp2p2;
        if (dataOff >= 64)
          return H.ioore(data, dataOff);
        data[dataOff] = tmp10p2 + tmp11p2;
        if (t4 >= 64)
          return H.ioore(data, t4);
        data[t4] = tmp10p2 - tmp11p2;
        z1p2 = (tmp1p2 - tmp2p2 + tmp13p2) * 0.707106781;
        if (t2 >= 64)
          return H.ioore(data, t2);
        data[t2] = tmp13p2 + z1p2;
        if (t6 >= 64)
          return H.ioore(data, t6);
        data[t6] = tmp13p2 - z1p2;
        tmp10p2 = d3 - d4 + tmp5p2;
        tmp12p2 = tmp6p2 + tmp7p2;
        z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
        z2p2 = 0.5411961 * tmp10p2 + z5p2;
        z4p2 = 1.306562965 * tmp12p2 + z5p2;
        z3p2 = (tmp5p2 + tmp6p2) * 0.707106781;
        z11p2 = tmp7p2 + z3p2;
        z13p2 = tmp7p2 - z3p2;
        if (t5 >= 64)
          return H.ioore(data, t5);
        data[t5] = z13p2 + z2p2;
        if (t3 >= 64)
          return H.ioore(data, t3);
        data[t3] = z13p2 - z2p2;
        if (t1 >= 64)
          return H.ioore(data, t1);
        data[t1] = z11p2 + z4p2;
        if (t7 >= 64)
          return H.ioore(data, t7);
        data[t7] = z11p2 - z4p2;
        ++dataOff;
      }
      for (t1 = this.outputfDCTQuant, i = 0; i < 64; ++i) {
        fDCTQuant = data[i] * fdtbl[i];
        C.JSArray_methods.$indexSet(t1, i, fDCTQuant > 0 ? C.JSNumber_methods.toInt$0(fDCTQuant + 0.5) : C.JSNumber_methods.toInt$0(fDCTQuant - 0.5));
      }
      return t1;
    },
    _writeAPP1$2: function(out, exif) {
      var t2, _i, rawData,
        t1 = exif.rawData;
      if (t1 == null)
        return;
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        rawData = t1[_i];
        out.writeByte$1(255);
        out.writeByte$1(225);
        out.writeUint16$1(rawData.get$length(rawData) + 2);
        out.writeBytes$1(rawData);
      }
    },
    _writeDQT$1: function(out) {
      var t1, i, j;
      out.writeByte$1(255);
      out.writeByte$1(219);
      out.writeUint16$1(132);
      out.writeByte$1(0);
      for (t1 = this.YTable, i = 0; i < 64; ++i)
        out.writeByte$1(t1[i]);
      out.writeByte$1(1);
      for (t1 = this.UVTable, j = 0; j < 64; ++j)
        out.writeByte$1(t1[j]);
    },
    _writeDHT$1: function(out) {
      var i, j, k, l, m, n, o, p;
      out.writeByte$1(255);
      out.writeByte$1(196);
      out.writeUint16$1(418);
      out.writeByte$1(0);
      for (i = 0; i < 16;) {
        ++i;
        out.writeByte$1(C.List_F1L[i]);
      }
      for (j = 0; j <= 11; ++j)
        out.writeByte$1(C.List_UiL[j]);
      out.writeByte$1(16);
      for (k = 0; k < 16;) {
        ++k;
        out.writeByte$1(C.List_F1L1[k]);
      }
      for (l = 0; l <= 161; ++l)
        out.writeByte$1(C.List_G61[l]);
      out.writeByte$1(1);
      for (m = 0; m < 16;) {
        ++m;
        out.writeByte$1(C.List_F1L0[m]);
      }
      for (n = 0; n <= 11; ++n)
        out.writeByte$1(C.List_UiL[n]);
      out.writeByte$1(17);
      for (o = 0; o < 16;) {
        ++o;
        out.writeByte$1(C.List_F1L2[o]);
      }
      for (p = 0; p <= 161; ++p)
        out.writeByte$1(C.List_AKW[p]);
    },
    _processDU$6: function(out, CDU, fdtbl, DC, HTDC, HTAC) {
      var EOB, M16zeroes, DU_DCT, j, t2, Diff, t3, pos, end0pos, t4, i, lng, i0, nrzeroes, nrmarker, t5, _this = this,
        t1 = type$.List_double;
      t1._as(CDU);
      t1._as(fdtbl);
      type$.nullable_List_nullable_List_int._as(HTDC);
      type$.List_nullable_List_int._as(HTAC);
      t1 = HTAC.length;
      if (0 >= t1)
        return H.ioore(HTAC, 0);
      EOB = HTAC[0];
      if (240 >= t1)
        return H.ioore(HTAC, 240);
      M16zeroes = HTAC[240];
      DU_DCT = _this._fDCTQuant$2(CDU, fdtbl);
      for (t1 = _this.DU, j = 0; j < 64; ++j)
        C.JSArray_methods.$indexSet(t1, C.List_kcl[j], DU_DCT[j]);
      t2 = t1[0];
      t2.toString;
      Diff = t2 - DC;
      if (Diff === 0) {
        if (0 >= HTDC.length)
          return H.ioore(HTDC, 0);
        t3 = HTDC[0];
        t3.toString;
        _this._writeBits$2(out, t3);
      } else {
        pos = 32767 + Diff;
        HTDC.toString;
        t3 = _this.category;
        if (pos < 0 || pos >= 65535)
          return H.ioore(t3, pos);
        t3 = t3[pos];
        t3.toString;
        if (t3 >= HTDC.length)
          return H.ioore(HTDC, t3);
        t3 = HTDC[t3];
        t3.toString;
        _this._writeBits$2(out, t3);
        t3 = _this.bitcode[pos];
        t3.toString;
        _this._writeBits$2(out, t3);
      }
      end0pos = 63;
      while (true) {
        if (!(end0pos > 0 && t1[end0pos] === 0))
          break;
        --end0pos;
      }
      if (end0pos === 0) {
        EOB.toString;
        _this._writeBits$2(out, EOB);
        return t2;
      }
      for (t3 = _this.category, t4 = _this.bitcode, i = 1, lng = null; i <= end0pos;) {
        i0 = i;
        while (true) {
          if (i0 < 0 || i0 >= 64)
            return H.ioore(t1, i0);
          if (!(t1[i0] === 0 && i0 <= end0pos))
            break;
          ++i0;
        }
        nrzeroes = i0 - i;
        if (nrzeroes >= 16) {
          lng = C.JSInt_methods._shrOtherPositive$1(nrzeroes, 4);
          for (nrmarker = 1; nrmarker <= lng; ++nrmarker) {
            M16zeroes.toString;
            _this._writeBits$2(out, M16zeroes);
          }
          nrzeroes &= 15;
        }
        t5 = t1[i0];
        t5.toString;
        pos = 32767 + t5;
        if (pos < 0 || pos >= 65535)
          return H.ioore(t3, pos);
        t5 = t3[pos];
        t5.toString;
        t5 = (nrzeroes << 4 >>> 0) + t5;
        if (t5 >= HTAC.length)
          return H.ioore(HTAC, t5);
        t5 = HTAC[t5];
        t5.toString;
        _this._writeBits$2(out, t5);
        t5 = t4[pos];
        t5.toString;
        _this._writeBits$2(out, t5);
        i = i0 + 1;
      }
      if (end0pos !== 63) {
        EOB.toString;
        _this._writeBits$2(out, EOB);
      }
      return t2;
    },
    _writeBits$2: function(out, bits) {
      var t1, value, posval, _this = this;
      type$.List_int._as(bits);
      t1 = bits.length;
      if (0 >= t1)
        return H.ioore(bits, 0);
      value = bits[0];
      if (1 >= t1)
        return H.ioore(bits, 1);
      posval = bits[1] - 1;
      for (; posval >= 0;) {
        if ((value & C.JSInt_methods.$shl(1, posval)) >>> 0 !== 0)
          _this._bytenew = (_this._bytenew | C.JSInt_methods.$shl(1, _this._bytepos)) >>> 0;
        --posval;
        if (--_this._bytepos < 0) {
          t1 = _this._bytenew;
          if (t1 === 255) {
            out.writeByte$1(255);
            out.writeByte$1(0);
          } else
            out.writeByte$1(t1);
          _this._bytepos = 7;
          _this._bytenew = 0;
        }
      }
    },
    set$YDC_HT: function(YDC_HT) {
      this.YDC_HT = type$.nullable_List_nullable_List_int._as(YDC_HT);
    },
    set$UVDC_HT: function(UVDC_HT) {
      this.UVDC_HT = type$.nullable_List_nullable_List_int._as(UVDC_HT);
    },
    set$__JpegEncoder_YAC_HT: function(__JpegEncoder_YAC_HT) {
      this.__JpegEncoder_YAC_HT = type$.nullable_List_nullable_List_int._as(__JpegEncoder_YAC_HT);
    },
    set$__JpegEncoder_UVAC_HT: function(__JpegEncoder_UVAC_HT) {
      this.__JpegEncoder_UVAC_HT = type$.nullable_List_nullable_List_int._as(__JpegEncoder_UVAC_HT);
    }
  };
  D.PngFrame.prototype = {};
  D.InternalPngFrame.prototype = {};
  Q.PngInfo.prototype = {
    set$palette: function(palette) {
      this.palette = type$.nullable_List_nullable_int._as(palette);
    },
    set$transparency: function(transparency) {
      this.transparency = type$.nullable_List_int._as(transparency);
    },
    set$colorLut: function(colorLut) {
      this.colorLut = type$.nullable_List_nullable_int._as(colorLut);
    }
  };
  Q.InternalPngInfo.prototype = {};
  G.PngDecoder.prototype = {
    startDecode$1: function(data) {
      var pngHeader, t2, t3, t4, i, t5, inputPos, chunkSize, chunkType, bytes, t6, hdr, hdrBytes, t7, t8, crc, gammaInt, frame, p3, r, g, b, _this = this, _null = null, _s6_ = "_input",
        t1 = type$.List_int;
      _this.__PngDecoder__input = Z.InputBuffer$(t1._as(data), true, _null, 0);
      pngHeader = _this.get$_input().readBytes$1(8);
      for (t2 = pngHeader.buffer, t3 = pngHeader.offset, t4 = t2.length, i = 0; i < 8; ++i) {
        t5 = t3 + i;
        if (t5 < 0 || t5 >= t4)
          return H.ioore(t2, t5);
        if (t2[t5] !== C.List_2Vk[i])
          return _null;
      }
      for (t2 = type$.JSArray_int, t3 = type$.JSArray_PngFrame; true;) {
        t4 = _this.__PngDecoder__input;
        t5 = t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4;
        inputPos = t5.offset - t5.start;
        chunkSize = t4.readUint32$0();
        t4 = _this.__PngDecoder__input;
        chunkType = (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readString$1(4);
        switch (chunkType) {
          case "IHDR":
            t4 = _this.__PngDecoder__input;
            if (t4 == null)
              t4 = H.throwExpression(H.LateError$fieldNI(_s6_));
            bytes = t4.subset$1(chunkSize);
            t5 = bytes.end;
            t4.offset = t4.offset + (t5 - bytes.offset);
            t4 = bytes.buffer;
            t6 = bytes.offset;
            hdr = new Z.InputBuffer(t4, bytes.start, t5, t6, true);
            hdrBytes = hdr.toUint8List$0();
            t5 = new Q.InternalPngInfo(H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t2));
            _this._info = t5;
            t5.width = hdr.readUint32$0();
            t5 = _this._info;
            t5.toString;
            t5.height = hdr.readUint32$0();
            t5 = _this._info;
            t5.toString;
            t6 = hdr.offset;
            t7 = hdr.offset = t6 + 1;
            t8 = t4.length;
            if (t6 < 0 || t6 >= t8)
              return H.ioore(t4, t6);
            t5.bits = t4[t6];
            t6 = hdr.offset = t7 + 1;
            if (t7 < 0 || t7 >= t8)
              return H.ioore(t4, t7);
            t5.colorType = t4[t7];
            t7 = hdr.offset = t6 + 1;
            if (t6 < 0 || t6 >= t8)
              return H.ioore(t4, t6);
            t6 = hdr.offset = t7 + 1;
            if (t7 < 0 || t7 >= t8)
              return H.ioore(t4, t7);
            t5.filterMethod = t4[t7];
            hdr.offset = t6 + 1;
            if (t6 < 0 || t6 >= t8)
              return H.ioore(t4, t6);
            t5.interlaceMethod = t4[t6];
            if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([0, 2, 3, 4, 6], t2), _this._info.colorType))
              return _null;
            t4 = _this._info;
            if (t4.filterMethod !== 0)
              return _null;
            switch (t4.colorType) {
              case 0:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8, 16], t2), _this._info.bits))
                  return _null;
                break;
              case 2:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._info.bits))
                  return _null;
                break;
              case 3:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([1, 2, 4, 8], t2), _this._info.bits))
                  return _null;
                break;
              case 4:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._info.bits))
                  return _null;
                break;
              case 6:
                if (!C.JSArray_methods.contains$1(H.setRuntimeTypeInfo([8, 16], t2), _this._info.bits))
                  return _null;
                break;
            }
            t4 = _this.__PngDecoder__input;
            if ((t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0() !== X.getCrc32(t1._as(hdrBytes), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "PLTE":
            t4 = _this._info;
            t4.toString;
            t5 = _this.__PngDecoder__input;
            if (t5 == null)
              t5 = H.throwExpression(H.LateError$fieldNI(_s6_));
            bytes = t5.subset$1(chunkSize);
            t5.offset = t5.offset + (bytes.end - bytes.offset);
            t4.set$palette(bytes.toUint8List$0());
            t4 = _this.__PngDecoder__input;
            if ((t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0() !== X.getCrc32(t1._as(t1._as(_this._info.palette)), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "tRNS":
            t4 = _this._info;
            t4.toString;
            t5 = _this.__PngDecoder__input;
            if (t5 == null)
              t5 = H.throwExpression(H.LateError$fieldNI(_s6_));
            bytes = t5.subset$1(chunkSize);
            t5.offset = t5.offset + (bytes.end - bytes.offset);
            t4.set$transparency(bytes.toUint8List$0());
            t4 = _this.__PngDecoder__input;
            crc = (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this._info.transparency;
            t4.toString;
            if (crc !== X.getCrc32(t1._as(t4), X.getCrc32(new H.CodeUnits(chunkType), 0)))
              throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
            break;
          case "IEND":
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += 4;
            break;
          case "gAMA":
            if (chunkSize !== 4)
              throw H.wrapException(K.ImageException$("Invalid gAMA chunk"));
            t4 = _this.__PngDecoder__input;
            gammaInt = (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += 4;
            if (gammaInt !== 100000)
              _this._info.gamma = gammaInt / 100000;
            break;
          case "IDAT":
            C.JSArray_methods.add$1(_this._info._idat, inputPos);
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += chunkSize;
            t4.offset += 4;
            break;
          case "acTL":
            _this._info.toString;
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            _this._info.toString;
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += 4;
            break;
          case "fcTL":
            frame = new D.InternalPngFrame(H.setRuntimeTypeInfo([], t2));
            C.JSArray_methods.add$1(_this._info.frames, frame);
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            frame.width = (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            frame.height = (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
            t4 = _this.__PngDecoder__input;
            t5 = t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4;
            t6 = t5.buffer;
            t5 = t5.offset++;
            if (t5 < 0 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t5 = t4;
            t6 = t5.buffer;
            t5 = t5.offset++;
            if (t5 < 0 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t4.offset += 4;
            break;
          case "fdAT":
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint32$0();
            C.JSArray_methods.add$1(C.JSArray_methods.get$last(_this._info.frames)._fdat, inputPos);
            t4 = _this.__PngDecoder__input;
            t5 = t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4;
            t5.offset += chunkSize - 4;
            t4.offset += 4;
            break;
          case "bKGD":
            t4 = _this._info;
            t5 = t4.colorType;
            if (t5 === 3) {
              t5 = _this.__PngDecoder__input;
              if (t5 == null)
                t5 = H.throwExpression(H.LateError$fieldNI(_s6_));
              t6 = t5.buffer;
              t5 = t5.offset++;
              if (t5 < 0 || t5 >= t6.length)
                return H.ioore(t6, t5);
              --chunkSize;
              p3 = t6[t5] * 3;
              t4 = t4.palette;
              t5 = t4.length;
              if (p3 < 0 || p3 >= t5)
                return H.ioore(t4, p3);
              r = t4[p3];
              t6 = p3 + 1;
              if (t6 >= t5)
                return H.ioore(t4, t6);
              g = t4[t6];
              t6 = p3 + 2;
              if (t6 >= t5)
                return H.ioore(t4, t6);
              b = t4[t6];
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(255, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(b, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(g, 0, 255));
              C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(r, 0, 255));
            } else if (t5 === 0 || t5 === 4) {
              t4 = _this.__PngDecoder__input;
              (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
              chunkSize -= 2;
            } else if (t5 === 2 || t5 === 6) {
              t4 = _this.__PngDecoder__input;
              (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
              t4 = _this.__PngDecoder__input;
              (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
              t4 = _this.__PngDecoder__input;
              (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).readUint16$0();
              chunkSize -= 24;
            }
            if (chunkSize > 0) {
              t4 = _this.__PngDecoder__input;
              (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += chunkSize;
            }
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += 4;
            break;
          case "iCCP":
            t4 = _this._info;
            t4.toString;
            t5 = _this.__PngDecoder__input;
            t4.iCCPName = (t5 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t5).readString$0();
            t4 = _this._info;
            t4.toString;
            t5 = _this.__PngDecoder__input;
            t6 = t5 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t5;
            t7 = t6.buffer;
            t6 = t6.offset++;
            if (t6 < 0 || t6 >= t7.length)
              return H.ioore(t7, t6);
            t4 = t4.iCCPName;
            bytes = t5.subset$1(chunkSize - (t4.length + 2));
            t5.offset = t5.offset + (bytes.end - bytes.offset);
            t5 = _this._info;
            t5.toString;
            t5.iCCPData = bytes.toUint8List$0();
            t5 = _this.__PngDecoder__input;
            (t5 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t5).offset += 4;
            break;
          default:
            t4 = _this.__PngDecoder__input;
            (t4 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t4).offset += chunkSize;
            t4.offset += 4;
            break;
        }
        if (chunkType === "IEND")
          break;
        t4 = _this.__PngDecoder__input;
        if (t4 == null)
          t4 = H.throwExpression(H.LateError$fieldNI(_s6_));
        if (t4.offset >= t4.end)
          return _null;
      }
      return _this._info;
    },
    decodeFrame$1: function(frame) {
      var imageData, t1, width, height, t2, t3, len, i, t4, chunkSize, chunkType, bytes, data, f, channels, image, cmf, flg, method, t5, buffer, input, origW, origH, _this = this, _null = null, _s6_ = "_input";
      if (_this._info == null)
        return _null;
      imageData = H.setRuntimeTypeInfo([], type$.JSArray_int);
      t1 = _this._info;
      width = t1.width;
      height = t1.height;
      t2 = t1.frames;
      t3 = t2.length;
      if (t3 === 0 || frame === 0)
        for (len = t1._idat.length, t1 = type$.List_int, i = 0; i < len; ++i) {
          t2 = _this.__PngDecoder__input;
          t3 = t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2;
          t4 = _this._info._idat;
          if (i >= t4.length)
            return H.ioore(t4, i);
          t3.offset = t4[i];
          chunkSize = t2.readUint32$0();
          t2 = _this.__PngDecoder__input;
          chunkType = (t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2).readString$1(4);
          t2 = _this.__PngDecoder__input;
          if (t2 == null)
            t2 = H.throwExpression(H.LateError$fieldNI(_s6_));
          bytes = t2.subset$1(chunkSize);
          t2.offset = t2.offset + (bytes.end - bytes.offset);
          data = bytes.toUint8List$0();
          C.JSArray_methods.addAll$1(imageData, data);
          t2 = _this.__PngDecoder__input;
          if ((t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2).readUint32$0() !== X.getCrc32(t1._as(data), X.getCrc32(new H.CodeUnits(chunkType), 0)))
            throw H.wrapException(K.ImageException$("Invalid " + chunkType + " checksum"));
        }
      else {
        if (frame >= t3)
          throw H.wrapException(K.ImageException$("Invalid Frame Number: " + frame));
        f = t2[frame];
        width = f.width;
        height = f.height;
        for (t1 = f._fdat, i = 0; i < t1.length; ++i) {
          t2 = _this.__PngDecoder__input;
          t3 = t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2;
          t3.offset = t1[i];
          chunkSize = t2.readUint32$0();
          t2 = _this.__PngDecoder__input;
          (t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2).readString$1(4);
          t2 = _this.__PngDecoder__input;
          (t2 == null ? H.throwExpression(H.LateError$fieldNI(_s6_)) : t2).offset += 4;
          bytes = t2.subset$1(chunkSize);
          t2.offset = t2.offset + (bytes.end - bytes.offset);
          C.JSArray_methods.addAll$1(imageData, bytes.toUint8List$0());
        }
      }
      t1 = _this._info;
      t2 = t1.colorType;
      channels = t2 === 4 || t2 === 6 || t1.transparency != null ? C.Channels_1 : C.Channels_0;
      width.toString;
      height.toString;
      image = U.Image$(width, height, channels, _null, _null);
      t1 = type$.List_int;
      t2 = T.InputStream$(t1._as(imageData), 1, _null, 0);
      cmf = t2.readByte$0();
      flg = t2.readByte$0();
      method = cmf & 8;
      C.JSInt_methods._shrOtherPositive$1(cmf, 3);
      if (method !== 8)
        H.throwExpression(R.ArchiveException$("Only DEFLATE compression supported: " + method));
      if (C.JSInt_methods.$mod((cmf << 8 >>> 0) + flg, 31) !== 0)
        H.throwExpression(R.ArchiveException$("Invalid FCHECK"));
      if ((flg >>> 5 & 1) !== 0) {
        t2.readUint32$0();
        H.throwExpression(R.ArchiveException$("FDICT Encoding not currently supported"));
      }
      t3 = new Y.HuffmanTable();
      t3.HuffmanTable$1(C.List_2Bc);
      t4 = new Y.HuffmanTable();
      t4.HuffmanTable$1(C.List_X3d);
      t5 = new Q.OutputStream(new Uint8Array(32768));
      t4 = new S.Inflate(t2, t5, t3, t4);
      t4.inputSet = true;
      t4._inflate$0();
      buffer = t1._as(H.NativeUint8List_NativeUint8List$view(t5._output_stream$_buffer.buffer, 0, t5._output_stream$_length));
      t2.readUint32$0();
      input = Z.InputBuffer$(buffer, true, _null, 0);
      _this._bitBufferLen = _this._bitBuffer = 0;
      t1 = _this._info;
      if (t1.colorLut == null) {
        t1.set$colorLut(P.List_List$generate(256, new G.PngDecoder_decodeFrame_closure(), false, type$.int));
        t1 = _this._info;
        t2 = t1.palette;
        if (t2 != null && t1.gamma != null)
          for (t3 = t2.length, t1 = t1.colorLut, i = 0; i < t3; ++i) {
            t1.toString;
            t4 = t2[i];
            if (t4 >= 256)
              return H.ioore(t1, t4);
            t2[i] = t1[t4];
          }
      }
      t1 = _this._info;
      origW = t1.width;
      origH = t1.height;
      t1.width = width;
      t1.height = height;
      _this._progressY = 0;
      if (t1.interlaceMethod !== 0) {
        t1 = height + 7 >>> 3;
        _this._processPass$8(input, image, 0, 0, 8, 8, width + 7 >>> 3, t1);
        t2 = width + 3;
        _this._processPass$8(input, image, 4, 0, 8, 8, t2 >>> 3, t1);
        t1 = height + 3;
        _this._processPass$8(input, image, 0, 4, 4, 8, t2 >>> 2, t1 >>> 3);
        t2 = width + 1;
        _this._processPass$8(input, image, 2, 0, 4, 4, t2 >>> 2, t1 >>> 2);
        t1 = height + 1;
        _this._processPass$8(input, image, 0, 2, 2, 4, t2 >>> 1, t1 >>> 2);
        _this._processPass$8(input, image, 1, 0, 2, 2, width >>> 1, t1 >>> 1);
        _this._processPass$8(input, image, 0, 1, 1, 2, width, height >>> 1);
      } else
        _this._process$2(input, image);
      t1 = _this._info;
      t1.width = origW;
      t1.height = origH;
      if (t1.iCCPData != null)
        image.iccProfile = new D.ICCProfileData();
      return image;
    },
    decodeImage$1: function(bytes) {
      if (this.startDecode$1(type$.List_int._as(bytes)) == null)
        return null;
      return this.decodeFrame$1(0);
    },
    _processPass$8: function(input, image, xOffset, yOffset, xStep, yStep, passWidth, passHeight) {
      var channels, pixelDepth, bpp, rowBytes, line, inData, pixel, t3, t4, t5, blockWidth, t6, t7, dstY, srcY, ri, t8, bytes, row, rowInput, dstX, srcX, c, t9, i, j, t10, t11, _this = this,
        t1 = _this._info,
        t2 = t1.colorType;
      if (t2 === 4)
        channels = 2;
      else if (t2 === 2)
        channels = 3;
      else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
      }
      t1 = t1.bits;
      t1.toString;
      pixelDepth = channels * t1;
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      rowBytes = C.JSInt_methods._shrOtherPositive$1(pixelDepth * passWidth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_List_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_int);
      for (t1 = image.data, t2 = image.width, t3 = t1.length, t4 = xStep > 1, t5 = image.height, blockWidth = xStep - xOffset, t6 = input.buffer, t7 = blockWidth <= 1, dstY = yOffset, srcY = 0, ri = 0; srcY < passHeight; ++srcY, dstY += yStep, ++_this._progressY) {
        t8 = input.offset++;
        if (t8 < 0 || t8 >= t6.length)
          return H.ioore(t6, t8);
        t8 = t6[t8];
        bytes = input.subset$1(rowBytes);
        input.offset = input.offset + (bytes.end - bytes.offset);
        C.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        row = inData[ri];
        ri = 1 - ri;
        _this._unfilter$4(t8, bpp, row, inData[ri]);
        _this._bitBufferLen = _this._bitBuffer = 0;
        t8 = row.length;
        rowInput = new Z.InputBuffer(row, 0, t8, 0, true);
        for (t8 = dstY * t2, dstX = xOffset, srcX = 0; srcX < passWidth; ++srcX, dstX += xStep) {
          _this._readPixel$2(rowInput, pixel);
          c = _this._getColor$1(pixel);
          t9 = t8 + dstX;
          if (t9 < 0 || t9 >= t3)
            return H.ioore(t1, t9);
          t1[t9] = c;
          if (!t7 || t4)
            for (i = 0; i < xStep; ++i)
              for (j = 0; j < blockWidth; ++j) {
                t9 = dstX + j;
                t10 = dstY + j;
                if (t9 < t2)
                  t11 = t10 < t5;
                else
                  t11 = false;
                if (t11) {
                  t9 = t10 * t2 + t9;
                  if (t9 < 0 || t9 >= t3)
                    return H.ioore(t1, t9);
                  t1[t9] = c;
                }
              }
        }
      }
    },
    _process$2: function(input, image) {
      var channels, pixelDepth, w, h, rowBytes, bpp, line, inData, pixel, t3, y, pi, ri, t4, bytes, ri0, t5, rowInput, x, pi0, _this = this,
        t1 = _this._info,
        t2 = t1.colorType;
      if (t2 === 4)
        channels = 2;
      else if (t2 === 2)
        channels = 3;
      else {
        t2 = t2 === 6 ? 4 : 1;
        channels = t2;
      }
      t2 = t1.bits;
      t2.toString;
      pixelDepth = channels * t2;
      w = t1.width;
      h = t1.height;
      rowBytes = C.JSInt_methods._shrOtherPositive$1(w * pixelDepth + 7, 3);
      bpp = C.JSInt_methods._shrOtherPositive$1(pixelDepth + 7, 3);
      line = P.List_List$filled(rowBytes, 0, false, type$.int);
      inData = H.setRuntimeTypeInfo([line, line], type$.JSArray_List_int);
      pixel = H.setRuntimeTypeInfo([0, 0, 0, 0], type$.JSArray_int);
      for (t1 = image.data, t2 = t1.length, t3 = input.buffer, y = 0, pi = 0, ri = 0; y < h; ++y, ri = ri0) {
        t4 = input.offset++;
        if (t4 < 0 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t4 = t3[t4];
        bytes = input.subset$1(rowBytes);
        input.offset = input.offset + (bytes.end - bytes.offset);
        C.JSArray_methods.$indexSet(inData, ri, bytes.toUint8List$0());
        if (ri < 0 || ri >= 2)
          return H.ioore(inData, ri);
        ri0 = 1 - ri;
        _this._unfilter$4(t4, bpp, inData[ri], inData[ri0]);
        _this._bitBufferLen = _this._bitBuffer = 0;
        t4 = inData[ri];
        t5 = t4.length;
        rowInput = new Z.InputBuffer(t4, 0, t5, 0, true);
        for (x = 0; x < w; ++x, pi = pi0) {
          _this._readPixel$2(rowInput, pixel);
          pi0 = pi + 1;
          t4 = _this._getColor$1(pixel);
          if (pi < 0 || pi >= t2)
            return H.ioore(t1, pi);
          t1[pi] = t4;
        }
      }
    },
    _unfilter$4: function(filterType, bpp, row, prevRow) {
      var rowBytes, x, t2, t3, t4, a, b, c, p, pa, pb, pc, paeth,
        t1 = type$.List_int;
      t1._as(row);
      t1._as(prevRow);
      rowBytes = row.length;
      switch (filterType) {
        case 0:
          break;
        case 1:
          for (t1 = J.getInterceptor$ax(row), x = bpp; x < rowBytes; ++x) {
            t2 = row.length;
            if (x >= t2)
              return H.ioore(row, x);
            t3 = row[x];
            t4 = x - bpp;
            if (t4 < 0 || t4 >= t2)
              return H.ioore(row, t4);
            t4 = row[t4];
            if (typeof t3 !== "number")
              return t3.$add();
            if (typeof t4 !== "number")
              return H.iae(t4);
            t1.$indexSet(row, x, t3 + t4 & 255);
          }
          break;
        case 2:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            if (x >= prevRow.length)
              return H.ioore(prevRow, x);
            t3 = prevRow[x];
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t1.$indexSet(row, x, t2 + t3 & 255);
          }
          break;
        case 3:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            if (x < bpp)
              a = 0;
            else {
              t2 = x - bpp;
              if (t2 < 0 || t2 >= row.length)
                return H.ioore(row, t2);
              a = row[t2];
            }
            if (x >= prevRow.length)
              return H.ioore(prevRow, x);
            b = prevRow[x];
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            t3 = C.JSInt_methods._shrOtherPositive$1(a + b, 1);
            if (typeof t2 !== "number")
              return t2.$add();
            t1.$indexSet(row, x, t2 + t3 & 255);
          }
          break;
        case 4:
          for (t1 = J.getInterceptor$ax(row), x = 0; x < rowBytes; ++x) {
            t2 = x < bpp;
            if (t2)
              a = 0;
            else {
              t3 = x - bpp;
              if (t3 < 0 || t3 >= row.length)
                return H.ioore(row, t3);
              a = row[t3];
            }
            t3 = prevRow.length;
            if (x >= t3)
              return H.ioore(prevRow, x);
            b = prevRow[x];
            if (t2)
              c = 0;
            else {
              t2 = x - bpp;
              if (t2 < 0 || t2 >= t3)
                return H.ioore(prevRow, t2);
              c = prevRow[t2];
            }
            p = a + b - c;
            pa = Math.abs(p - a);
            pb = Math.abs(p - b);
            pc = Math.abs(p - c);
            if (pa <= pb && pa <= pc)
              paeth = a;
            else
              paeth = pb <= pc ? b : c;
            if (x >= row.length)
              return H.ioore(row, x);
            t2 = row[x];
            if (typeof t2 !== "number")
              return t2.$add();
            t1.$indexSet(row, x, t2 + paeth & 255);
          }
          break;
        default:
          throw H.wrapException(K.ImageException$("Invalid filter value: " + filterType));
      }
    },
    _readBits$2: function(input, numBits) {
      var t1, t2, t3, t4, mask, _this = this;
      if (numBits === 0)
        return 0;
      if (numBits === 8)
        return input.readByte$0();
      if (numBits === 16)
        return input.readUint16$0();
      for (t1 = input.buffer, t2 = input.end; t3 = _this._bitBufferLen, t3 < numBits;) {
        t4 = input.offset;
        if (t4 >= t2)
          throw H.wrapException(K.ImageException$("Invalid PNG data."));
        input.offset = t4 + 1;
        if (t4 < 0 || t4 >= t1.length)
          return H.ioore(t1, t4);
        _this._bitBuffer = C.JSInt_methods.$shl(t1[t4], t3);
        _this._bitBufferLen = t3 + 8;
      }
      if (numBits === 1)
        mask = 1;
      else if (numBits === 2)
        mask = 3;
      else {
        if (numBits === 4)
          t1 = 15;
        else
          t1 = 0;
        mask = t1;
      }
      t1 = t3 - numBits;
      t2 = C.JSInt_methods._shrReceiverPositive$1(_this._bitBuffer, t1);
      _this._bitBufferLen = t1;
      return (t2 & mask) >>> 0;
    },
    _readPixel$2: function(input, pixel) {
      var t1, t2, _this = this;
      type$.List_int._as(pixel);
      t1 = _this._info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          t1 = t1.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 0, _this._readBits$2(input, t1));
          return;
        case 2:
          t1 = t1.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 0, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 1, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 2, _this._readBits$2(input, t1));
          return;
        case 3:
          t1 = t1.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 0, _this._readBits$2(input, t1));
          return;
        case 4:
          t1 = t1.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 0, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 1, _this._readBits$2(input, t1));
          return;
        case 6:
          t1 = t1.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 0, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 1, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 2, _this._readBits$2(input, t1));
          t1 = _this._info.bits;
          t1.toString;
          C.JSArray_methods.$indexSet(pixel, 3, _this._readBits$2(input, t1));
          return;
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    _getColor$1: function(raw) {
      var t1, t2, _g_get, _g_set, t3, _r_get, _r_set, _b_get, _b_set, t4, t5, t6, t7, p, a, r, g, _a_set, _this = this, _box_0 = {};
      type$.List_int._as(raw);
      t1 = _this._info;
      t2 = t1.colorType;
      switch (t2) {
        case 0:
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set(_box_0);
          switch (t1.bits) {
            case 1:
              _g_set.call$1(raw[0] === 0 ? 0 : 255);
              break;
            case 2:
              _g_set.call$1(raw[0] * 85);
              break;
            case 4:
              _g_set.call$1(raw[0] << 4 >>> 0);
              break;
            case 8:
              _g_set.call$1(raw[0]);
              break;
            case 16:
              _g_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[0], 8));
              break;
          }
          t1 = _this._info.colorLut;
          t1.toString;
          _g_set.call$1(C.JSArray_methods.$index(t1, _g_get.call$0()));
          t1 = _this._info.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t1 = t1[1];
            if (raw[0] === ((t3 & 255) << 24 | t1 & 255) >>> 0)
              return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), 0);
          }
          return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), 255);
        case 2:
          _box_0._r = null;
          _r_get = new G.PngDecoder__getColor__r_get(_box_0);
          _r_set = new G.PngDecoder__getColor__r_set(_box_0);
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get0(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set0(_box_0);
          _box_0._b = null;
          _b_get = new G.PngDecoder__getColor__b_get(_box_0);
          _b_set = new G.PngDecoder__getColor__b_set(_box_0);
          switch (t1.bits) {
            case 1:
              _r_set.call$1(raw[0] === 0 ? 0 : 255);
              _g_set.call$1(raw[1] === 0 ? 0 : 255);
              _b_set.call$1(raw[2] === 0 ? 0 : 255);
              break;
            case 2:
              _r_set.call$1(raw[0] * 85);
              _g_set.call$1(raw[1] * 85);
              _b_set.call$1(raw[2] * 85);
              break;
            case 4:
              _r_set.call$1(raw[0] << 4 >>> 0);
              _g_set.call$1(raw[1] << 4 >>> 0);
              _b_set.call$1(raw[2] << 4 >>> 0);
              break;
            case 8:
              _r_set.call$1(raw[0]);
              _g_set.call$1(raw[1]);
              _b_set.call$1(raw[2]);
              break;
            case 16:
              _r_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[0], 8));
              _g_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[1], 8));
              _b_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[2], 8));
              break;
          }
          t1 = _this._info.colorLut;
          t1.toString;
          _r_set.call$1(C.JSArray_methods.$index(t1, _r_get.call$0()));
          t1 = _this._info.colorLut;
          t1.toString;
          _g_set.call$1(C.JSArray_methods.$index(t1, _g_get.call$0()));
          t1 = _this._info.colorLut;
          t1.toString;
          _b_set.call$1(C.JSArray_methods.$index(t1, _b_get.call$0()));
          t1 = _this._info.transparency;
          if (t1 != null) {
            t2 = t1.length;
            if (0 >= t2)
              return H.ioore(t1, 0);
            t3 = t1[0];
            if (1 >= t2)
              return H.ioore(t1, 1);
            t4 = t1[1];
            if (2 >= t2)
              return H.ioore(t1, 2);
            t5 = t1[2];
            if (3 >= t2)
              return H.ioore(t1, 3);
            t6 = t1[3];
            if (4 >= t2)
              return H.ioore(t1, 4);
            t7 = t1[4];
            if (5 >= t2)
              return H.ioore(t1, 5);
            t1 = t1[5];
            if (raw[0] === ((t3 & 255) << 8 | t4 & 255) && raw[1] === ((t5 & 255) << 8 | t6 & 255) && raw[2] === ((t7 & 255) << 8 | t1 & 255))
              return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), 0);
          }
          return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), 255);
        case 3:
          t2 = raw[0];
          p = t2 * 3;
          t3 = t1.transparency;
          if (t3 != null && t2 < t3.length) {
            if (t2 < 0 || t2 >= t3.length)
              return H.ioore(t3, t2);
            a = t3[t2];
          } else
            a = 255;
          t1 = t1.palette;
          t2 = t1.length;
          if (p >= t2)
            return K.getColor(255, 255, 255, a);
          if (p < 0)
            return H.ioore(t1, p);
          r = t1[p];
          t3 = p + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          g = t1[t3];
          t3 = p + 2;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          return K.getColor(r, g, t1[t3], a);
        case 4:
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get1(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set1(_box_0);
          _box_0._a = null;
          _a_set = new G.PngDecoder__getColor__a_set(_box_0);
          switch (t1.bits) {
            case 1:
              _g_set.call$1(raw[0] === 0 ? 0 : 255);
              _a_set.call$1(raw[1] === 0 ? 0 : 255);
              break;
            case 2:
              _g_set.call$1(raw[0] * 85);
              _a_set.call$1(raw[1] * 85);
              break;
            case 4:
              _g_set.call$1(raw[0] << 4 >>> 0);
              _a_set.call$1(raw[1] << 4 >>> 0);
              break;
            case 8:
              _g_set.call$1(raw[0]);
              _a_set.call$1(raw[1]);
              break;
            case 16:
              _g_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[0], 8));
              _a_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[1], 8));
              break;
          }
          t1 = _this._info.colorLut;
          t1.toString;
          _g_set.call$1(C.JSArray_methods.$index(t1, _g_get.call$0()));
          return K.getColor(_g_get.call$0(), _g_get.call$0(), _g_get.call$0(), new G.PngDecoder__getColor__a_get(_box_0).call$0());
        case 6:
          _box_0._r = null;
          _r_get = new G.PngDecoder__getColor__r_get0(_box_0);
          _r_set = new G.PngDecoder__getColor__r_set0(_box_0);
          _box_0._g = null;
          _g_get = new G.PngDecoder__getColor__g_get2(_box_0);
          _g_set = new G.PngDecoder__getColor__g_set2(_box_0);
          _box_0._b = null;
          _b_get = new G.PngDecoder__getColor__b_get0(_box_0);
          _b_set = new G.PngDecoder__getColor__b_set0(_box_0);
          _box_0._a = null;
          _a_set = new G.PngDecoder__getColor__a_set0(_box_0);
          switch (t1.bits) {
            case 1:
              _r_set.call$1(raw[0] === 0 ? 0 : 255);
              _g_set.call$1(raw[1] === 0 ? 0 : 255);
              _b_set.call$1(raw[2] === 0 ? 0 : 255);
              _a_set.call$1(raw[3] === 0 ? 0 : 255);
              break;
            case 2:
              _r_set.call$1(raw[0] * 85);
              _g_set.call$1(raw[1] * 85);
              _b_set.call$1(raw[2] * 85);
              _a_set.call$1(raw[3] * 85);
              break;
            case 4:
              _r_set.call$1(raw[0] << 4 >>> 0);
              _g_set.call$1(raw[1] << 4 >>> 0);
              _b_set.call$1(raw[2] << 4 >>> 0);
              _a_set.call$1(raw[3] << 4 >>> 0);
              break;
            case 8:
              _r_set.call$1(raw[0]);
              _g_set.call$1(raw[1]);
              _b_set.call$1(raw[2]);
              _a_set.call$1(raw[3]);
              break;
            case 16:
              _r_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[0], 8));
              _g_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[1], 8));
              _b_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[2], 8));
              _a_set.call$1(C.JSInt_methods._shrOtherPositive$1(raw[3], 8));
              break;
          }
          t1 = _this._info.colorLut;
          t1.toString;
          _r_set.call$1(C.JSArray_methods.$index(t1, _r_get.call$0()));
          t1 = _this._info.colorLut;
          t1.toString;
          _g_set.call$1(C.JSArray_methods.$index(t1, _g_get.call$0()));
          t1 = _this._info.colorLut;
          t1.toString;
          _b_set.call$1(C.JSArray_methods.$index(t1, _b_get.call$0()));
          return K.getColor(_r_get.call$0(), _g_get.call$0(), _b_get.call$0(), new G.PngDecoder__getColor__a_get0(_box_0).call$0());
      }
      throw H.wrapException(K.ImageException$("Invalid color type: " + H.S(t2) + "."));
    },
    get$_input: function() {
      var t1 = this.__PngDecoder__input;
      return t1 == null ? H.throwExpression(H.LateError$fieldNI("_input")) : t1;
    }
  };
  G.PngDecoder_decodeFrame_closure.prototype = {
    call$1: function(i) {
      return i;
    },
    $signature: 20
  };
  G.PngDecoder__getColor__g_set.prototype = {
    call$1: function(t1) {
      return this._box_0._g = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__g_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__b_set.prototype = {
    call$1: function(t1) {
      return this._box_0._b = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__g_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._g = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__r_set.prototype = {
    call$1: function(t1) {
      return this._box_0._r = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__r_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._r;
      return t1 == null ? H.throwExpression(H.LateError$localNI("r")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__g_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__b_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._b;
      return t1 == null ? H.throwExpression(H.LateError$localNI("b")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__a_set.prototype = {
    call$1: function(t1) {
      return this._box_0._a = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__g_set1.prototype = {
    call$1: function(t1) {
      return this._box_0._g = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__g_get1.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__a_get.prototype = {
    call$0: function() {
      var t1 = this._box_0._a;
      return t1 == null ? H.throwExpression(H.LateError$localNI("a")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__a_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._a = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__b_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._b = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__g_set2.prototype = {
    call$1: function(t1) {
      return this._box_0._g = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__r_set0.prototype = {
    call$1: function(t1) {
      return this._box_0._r = t1;
    },
    $signature: 1
  };
  G.PngDecoder__getColor__r_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._r;
      return t1 == null ? H.throwExpression(H.LateError$localNI("r")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__g_get2.prototype = {
    call$0: function() {
      var t1 = this._box_0._g;
      return t1 == null ? H.throwExpression(H.LateError$localNI("g")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__b_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._b;
      return t1 == null ? H.throwExpression(H.LateError$localNI("b")) : t1;
    },
    $signature: 2
  };
  G.PngDecoder__getColor__a_get0.prototype = {
    call$0: function() {
      var t1 = this._box_0._a;
      return t1 == null ? H.throwExpression(H.LateError$localNI("a")) : t1;
    },
    $signature: 2
  };
  D.ICCProfileData.prototype = {};
  U.Format.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.Channels.prototype = {
    toString$0: function(_) {
      return this._image$_name;
    }
  };
  U.BlendMode.prototype = {
    toString$0: function(_) {
      return "BlendMode.over";
    }
  };
  U.DisposeMode.prototype = {
    toString$0: function(_) {
      return "DisposeMode.clear";
    }
  };
  U.Image.prototype = {
    getBytes$0: function() {
      var len, bytes, i, t2, t3, t4, t5, j, _this = this,
        t1 = _this.data,
        rgba = H.NativeUint8List_NativeUint8List$view(t1.buffer, 0, null);
      switch (C.Format_2) {
        case C.Format_2:
          return rgba;
        case C.Format_3:
          len = _this.width * _this.height * 4;
          bytes = new Uint8Array(len);
          for (t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t3 = rgba[t2];
            if (i >= len)
              return H.ioore(bytes, i);
            bytes[i] = t3;
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t4 = rgba[t3];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t4;
            if (i >= t1)
              return H.ioore(rgba, i);
            t4 = rgba[i];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t4;
            t4 = i + 3;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t2 = rgba[t4];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t2;
          }
          return bytes;
        case C.Format_1:
          len = _this.width * _this.height * 4;
          bytes = new Uint8Array(len);
          for (t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t3 = rgba[t2];
            if (i >= len)
              return H.ioore(bytes, i);
            bytes[i] = t3;
            t3 = i + 1;
            t4 = i + 2;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t5 = rgba[t4];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t5;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t3;
            if (i >= t1)
              return H.ioore(rgba, i);
            t3 = rgba[i];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
          }
          return bytes;
        case C.Format_0:
          len = _this.width * _this.height * 4;
          bytes = new Uint8Array(len);
          for (t1 = rgba.length, i = 0; i < len; i += 4) {
            t2 = i + 3;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t3 = rgba[t2];
            if (i >= len)
              return H.ioore(bytes, i);
            bytes[i] = t3;
            t3 = i + 1;
            if (i >= t1)
              return H.ioore(rgba, i);
            t4 = rgba[i];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t4;
            t4 = i + 2;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t4 >= len)
              return H.ioore(bytes, t4);
            bytes[t4] = t3;
            if (t4 >= t1)
              return H.ioore(rgba, t4);
            t4 = rgba[t4];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t4;
          }
          return bytes;
        case C.Format_4:
          len = _this.width * _this.height * 3;
          bytes = new Uint8Array(len);
          for (t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            if (i >= t1)
              return H.ioore(rgba, i);
            t2 = rgba[i];
            if (j >= len)
              return H.ioore(bytes, j);
            bytes[j] = t2;
            t2 = j + 1;
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
            t3 = j + 2;
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t2 = rgba[t2];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t2;
          }
          return bytes;
        case C.Format_5:
          len = _this.width * _this.height * 3;
          bytes = new Uint8Array(len);
          for (t1 = rgba.length, i = 0, j = 0; j < len; i += 4, j += 3) {
            t2 = i + 2;
            if (t2 >= t1)
              return H.ioore(rgba, t2);
            t2 = rgba[t2];
            if (j >= len)
              return H.ioore(bytes, j);
            bytes[j] = t2;
            t2 = j + 1;
            t3 = i + 1;
            if (t3 >= t1)
              return H.ioore(rgba, t3);
            t3 = rgba[t3];
            if (t2 >= len)
              return H.ioore(bytes, t2);
            bytes[t2] = t3;
            t3 = j + 2;
            if (i >= t1)
              return H.ioore(rgba, i);
            t2 = rgba[i];
            if (t3 >= len)
              return H.ioore(bytes, t3);
            bytes[t3] = t2;
          }
          return bytes;
        case C.Format_6:
          t2 = _this.width * _this.height;
          bytes = new Uint8Array(t2);
          for (len = t1.length, i = 0; i < len; ++i) {
            t3 = t1[i];
            t3 = C.JSNumber_methods.round$0(0.299 * (t3 & 255) + 0.587 * (t3 >>> 8 & 255) + 0.114 * (t3 >>> 16 & 255));
            if (i >= t2)
              return H.ioore(bytes, i);
            bytes[i] = t3;
          }
          return bytes;
      }
    },
    get$length: function(_) {
      return this.data.length;
    },
    boundsSafe$2: function(x, y) {
      return x >= 0 && x < this.width && y >= 0 && y < this.height;
    },
    getPixelSafe$2: function(x, y) {
      var t1, t2;
      if (this.boundsSafe$2(x, y)) {
        t1 = this.data;
        t2 = y * this.width + x;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        t1 = t2;
      } else
        t1 = 0;
      return t1;
    },
    getPixelInterpolate$3: function(fx, fy, interpolation) {
      if (interpolation === C.Interpolation_2)
        return this.getPixelCubic$2(fx, fy);
      else if (interpolation === C.Interpolation_1)
        return this.getPixelLinear$2(fx, fy);
      return this.getPixelSafe$2(C.JSNumber_methods.toInt$0(fx), C.JSNumber_methods.toInt$0(fy));
    },
    getPixelLinear$2: function(fx, fy) {
      var y, ny, Icc, Inc, Icn, Inn, _this = this,
        t1 = C.JSNumber_methods.toInt$0(fx),
        x = t1 - (fx >= 0 ? 0 : 1),
        nx = x + 1;
      t1 = C.JSNumber_methods.toInt$0(fy);
      y = t1 - (fy >= 0 ? 0 : 1);
      ny = y + 1;
      t1 = new U.Image_getPixelLinear__linear(fx - x, fy - y);
      Icc = _this.getPixelSafe$2(x, y);
      Inc = _this.getPixelSafe$2(nx, y);
      Icn = _this.getPixelSafe$2(x, ny);
      Inn = _this.getPixelSafe$2(nx, ny);
      return K.getColor(t1.call$4(Icc & 255, Inc & 255, Icn & 255, Inn & 255), t1.call$4(Icc >>> 8 & 255, Inc >>> 8 & 255, Icn >>> 8 & 255, Inn >>> 8 & 255), t1.call$4(Icc >>> 16 & 255, Inc >>> 16 & 255, Icn >>> 16 & 255, Inn >>> 16 & 255), t1.call$4(Icc >>> 24 & 255, Inc >>> 24 & 255, Icn >>> 24 & 255, Inn >>> 24 & 255));
    },
    getPixelCubic$2: function(fx, fy) {
      var y, py, ny, ay, dx, dy, Ipp, Icp, Inp, Iap, Ip0, Ip1, Ip2, Ip3, Ipc, Icc, Inc, Iac, Ic0, Ic1, Ic2, Ic3, Ipn, Icn, Inn, Ian, In0, In1, In2, In3, Ipa, Ica, Ina, Iaa, Ia0, Ia1, Ia2, Ia3, c0, c1, c2, c3, _this = this,
        t1 = C.JSNumber_methods.toInt$0(fx),
        x = t1 - (fx >= 0 ? 0 : 1),
        px = x - 1,
        nx = x + 1,
        ax = x + 2;
      t1 = C.JSNumber_methods.toInt$0(fy);
      y = t1 - (fy >= 0 ? 0 : 1);
      py = y - 1;
      ny = y + 1;
      ay = y + 2;
      dx = fx - x;
      dy = fy - y;
      t1 = new U.Image_getPixelCubic__cubic();
      Ipp = _this.getPixelSafe$2(px, py);
      Icp = _this.getPixelSafe$2(x, py);
      Inp = _this.getPixelSafe$2(nx, py);
      Iap = _this.getPixelSafe$2(ax, py);
      Ip0 = t1.call$5(dx, Ipp & 255, Icp & 255, Inp & 255, Iap & 255);
      Ip1 = t1.call$5(dx, Ipp >>> 8 & 255, Icp >>> 8 & 255, Inp >>> 8 & 255, Iap >>> 8 & 255);
      Ip2 = t1.call$5(dx, Ipp >>> 16 & 255, Icp >>> 16 & 255, Inp >>> 16 & 255, Iap >>> 16 & 255);
      Ip3 = t1.call$5(dx, Ipp >>> 24 & 255, Icp >>> 24 & 255, Inp >>> 24 & 255, Iap >>> 24 & 255);
      Ipc = _this.getPixelSafe$2(px, y);
      Icc = _this.getPixelSafe$2(x, y);
      Inc = _this.getPixelSafe$2(nx, y);
      Iac = _this.getPixelSafe$2(ax, y);
      Ic0 = t1.call$5(dx, Ipc & 255, Icc & 255, Inc & 255, Iac & 255);
      Ic1 = t1.call$5(dx, Ipc >>> 8 & 255, Icc >>> 8 & 255, Inc >>> 8 & 255, Iac >>> 8 & 255);
      Ic2 = t1.call$5(dx, Ipc >>> 16 & 255, Icc >>> 16 & 255, Inc >>> 16 & 255, Iac >>> 16 & 255);
      Ic3 = t1.call$5(dx, Ipc >>> 24 & 255, Icc >>> 24 & 255, Inc >>> 24 & 255, Iac >>> 24 & 255);
      Ipn = _this.getPixelSafe$2(px, ny);
      Icn = _this.getPixelSafe$2(x, ny);
      Inn = _this.getPixelSafe$2(nx, ny);
      Ian = _this.getPixelSafe$2(ax, ny);
      In0 = t1.call$5(dx, Ipn & 255, Icn & 255, Inn & 255, Ian & 255);
      In1 = t1.call$5(dx, Ipn >>> 8 & 255, Icn >>> 8 & 255, Inn >>> 8 & 255, Ian >>> 8 & 255);
      In2 = t1.call$5(dx, Ipn >>> 16 & 255, Icn >>> 16 & 255, Inn >>> 16 & 255, Ian >>> 16 & 255);
      In3 = t1.call$5(dx, Ipn >>> 24 & 255, Icn >>> 24 & 255, Inn >>> 24 & 255, Ian >>> 24 & 255);
      Ipa = _this.getPixelSafe$2(px, ay);
      Ica = _this.getPixelSafe$2(x, ay);
      Ina = _this.getPixelSafe$2(nx, ay);
      Iaa = _this.getPixelSafe$2(ax, ay);
      Ia0 = t1.call$5(dx, Ipa & 255, Ica & 255, Ina & 255, Iaa & 255);
      Ia1 = t1.call$5(dx, Ipa >>> 8 & 255, Ica >>> 8 & 255, Ina >>> 8 & 255, Iaa >>> 8 & 255);
      Ia2 = t1.call$5(dx, Ipa >>> 16 & 255, Ica >>> 16 & 255, Ina >>> 16 & 255, Iaa >>> 16 & 255);
      Ia3 = t1.call$5(dx, Ipa >>> 24 & 255, Ica >>> 24 & 255, Ina >>> 24 & 255, Iaa >>> 24 & 255);
      c0 = t1.call$5(dy, Ip0, Ic0, In0, Ia0);
      c1 = t1.call$5(dy, Ip1, Ic1, In1, Ia1);
      c2 = t1.call$5(dy, Ip2, Ic2, In2, Ia2);
      c3 = t1.call$5(dy, Ip3, Ic3, In3, Ia3);
      return K.getColor(C.JSNumber_methods.toInt$0(c0), C.JSNumber_methods.toInt$0(c1), C.JSNumber_methods.toInt$0(c2), C.JSNumber_methods.toInt$0(c3));
    }
  };
  U.Image_getPixelLinear__linear.prototype = {
    call$4: function(Icc, Inc, Icn, Inn) {
      var t1 = this.dy;
      return C.JSNumber_methods.toInt$0(Icc + this.dx * (Inc - Icc + t1 * (Icc + Inn - Icn - Inc)) + t1 * (Icn - Icc));
    },
    $signature: 21
  };
  U.Image_getPixelCubic__cubic.prototype = {
    call$5: function(dx, Ipp, Icp, Inp, Iap) {
      var t1 = -Ipp,
        t2 = dx * dx;
      return Icp + 0.5 * (dx * (t1 + Inp) + t2 * (2 * Ipp - 5 * Icp + 4 * Inp - Iap) + t2 * dx * (t1 + 3 * Icp - 3 * Inp + Iap));
    },
    $signature: 22
  };
  K.ImageException.prototype = {
    toString$0: function(_) {
      return "ImageException: " + this.message;
    }
  };
  N.Flip.prototype = {
    toString$0: function(_) {
      return this._flip$_name;
    }
  };
  Z.InputBuffer.prototype = {
    get$length: function(_) {
      return this.end - this.offset;
    },
    subset$1: function(count) {
      var pos = this.offset;
      return Z.InputBuffer$(this.buffer, true, count, pos);
    },
    readByte$0: function() {
      var t1 = this.buffer,
        t2 = this.offset++;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    readBytes$1: function(count) {
      var pos = this.offset,
        bytes = Z.InputBuffer$(this.buffer, true, count, pos);
      this.offset = pos + (bytes.end - bytes.offset);
      return bytes;
    },
    readString$1: function(len) {
      var codes, t1, t2, t3, _this = this;
      if (len == null) {
        codes = H.setRuntimeTypeInfo([], type$.JSArray_int);
        for (t1 = _this.end, t2 = _this.buffer; t3 = _this.offset, t3 < t1;) {
          _this.offset = t3 + 1;
          if (t3 < 0 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t3 = t2[t3];
          if (t3 === 0)
            return P.String_String$fromCharCodes(codes);
          C.JSArray_methods.add$1(codes, t3);
        }
        throw H.wrapException(K.ImageException$("EOF reached without finding string terminator"));
      }
      return P.String_String$fromCharCodes(_this.readBytes$1(len).toUint8List$0());
    },
    readString$0: function() {
      return this.readString$1(null);
    },
    readUint16$0: function() {
      var _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      return (t2 & 255) << 8 | t3 & 255;
    },
    readUint32$0: function() {
      var t5, t6, _this = this,
        t1 = _this.buffer,
        t2 = _this.offset,
        t3 = _this.offset = t2 + 1,
        t4 = t1.length;
      if (t2 < 0 || t2 >= t4)
        return H.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$and();
      t5 = _this.offset = t3 + 1;
      if (t3 < 0 || t3 >= t4)
        return H.ioore(t1, t3);
      t3 = t1[t3];
      if (typeof t3 !== "number")
        return t3.$and();
      t6 = _this.offset = t5 + 1;
      if (t5 < 0 || t5 >= t4)
        return H.ioore(t1, t5);
      t5 = t1[t5];
      if (typeof t5 !== "number")
        return t5.$and();
      _this.offset = t6 + 1;
      if (t6 < 0 || t6 >= t4)
        return H.ioore(t1, t6);
      t6 = t1[t6];
      if (typeof t6 !== "number")
        return t6.$and();
      return ((t2 & 255) << 24 | (t3 & 255) << 16 | (t5 & 255) << 8 | t6 & 255) >>> 0;
    },
    toUint8List$0: function() {
      var t1 = this.offset,
        len = this.end - t1 - 0,
        t2 = this.buffer;
      if (type$.Uint8List._is(t2))
        return H.NativeUint8List_NativeUint8List$view(t2.buffer, t2.byteOffset + t1, len);
      t1 = new Uint8Array(H._ensureNativeList(J.sublist$2$ax(t2, t1, t1 + len)));
      return t1;
    }
  };
  X.Interpolation.prototype = {
    toString$0: function(_) {
      return this._interpolation$_name;
    }
  };
  G.OutputBuffer.prototype = {
    writeByte$1: function(value) {
      var t1, t2, _this = this;
      if (_this.length === _this._buffer.length)
        _this._expandBuffer$0();
      t1 = _this._buffer;
      t2 = _this.length++;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = value & 255;
    },
    writeBytes$1: function(bytes) {
      var len, t1, t2, t3, t4, _this = this;
      type$.List_int._as(bytes);
      len = bytes.length;
      for (; t1 = _this.length, t2 = t1 + len, t3 = _this._buffer, t4 = t3.length, t2 > t4;)
        _this._expandBuffer$1(t2 - t4);
      C.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      _this.length += len;
    },
    writeUint16$1: function(value) {
      this.writeByte$1(C.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      this.writeByte$1(value & 255);
      return;
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, t2, newBuffer;
      if (required != null)
        blockSize = required;
      else {
        t1 = this._buffer.length;
        blockSize = t1 === 0 ? 8192 : t1 * 2;
      }
      t1 = this._buffer;
      t2 = t1.length;
      newBuffer = new Uint8Array(t2 + blockSize);
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t2, t1);
      this._buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  X.Vector2D.prototype = {};
  X.CompositeLayer.prototype = {};
  L.main_closure.prototype = {
    call$1: function(e) {
      var copy, t3, t4, t5, onError,
        t1 = type$.MessageEvent._as(e).data,
        t2 = new P._AcceptStructuredCloneDart2Js([], []);
      t2.mustCopy = true;
      copy = t2.walk$1(t1);
      t1 = type$.List_dynamic;
      if (t1._is(copy) && J.get$length$asx(copy) === 5) {
        t2 = J.getInterceptor$asx(copy);
        t3 = H._asString(t2.$index(copy, 0));
        t4 = H._asInt(t2.$index(copy, 1));
        t5 = H._asInt(t2.$index(copy, 2));
        t1 = t1._as(t2.$index(copy, 3));
        t4 = L._composite(H._asDouble(t2.$index(copy, 4)), t3, t5, t1, t4).then$1$1(new L.main__closure(), type$.Null);
        onError = new L.main__closure0();
        type$.nullable_bool_Function_Object._as(null);
        t1 = t4.$ti;
        t5 = $.Zone__current;
        if (t5 !== C.C__RootZone)
          onError = P._registerErrorHandler(onError, t5);
        t4._addListener$1(new P._FutureListener(new P._Future(t5, t1), 2, null, onError, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      }
    },
    $signature: 23
  };
  L.main__closure.prototype = {
    call$1: function(result) {
      type$.List_int._as(result);
      J.postMessage$2$x(self.self, result, null);
    },
    $signature: 24
  };
  L.main__closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.printString("error " + H.S(error) + ", stackTrace " + H.S(stackTrace));
    },
    $signature: 8
  };
  L._composite_closure.prototype = {
    call$1: function(l) {
      var t1 = type$.Map_dynamic_dynamic;
      t1._as(l);
      return new X.CompositeLayer(P.double_parse(H._asString(l.$index(0, "angle"))), H._asString(l.$index(0, "assetPath")), X.Vector2D_Vector2D$fromJson(t1._as(l.$index(0, "constraints"))), X.Vector2D_Vector2D$fromJson(t1._as(l.$index(0, "position"))), P.double_parse(H._asString(l.$index(0, "scale"))), X.Vector2D_Vector2D$fromJson(t1._as(l.$index(0, "size"))));
    },
    $signature: 25
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 4);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 4);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, P._ListBase_Object_ListMixin, P.Iterable, H.ListIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H.ExceptionAndStackTrace, H._StackTrace, H.Closure, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.Rti, H._FunctionParameters, P._TimerImpl, P._AsyncAwaitCompleter, P.AsyncError, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P._StreamIterator, P._Zone, P.ListMixin, P.DateTime, P.StackOverflowError, P._Exception, P.FormatException, P.Null, P._StringStackTrace, P.StringBuffer, W.EventStreamProvider, P._StructuredClone, P._AcceptStructuredClone, P.NullRejectionException, T.InputStreamBase, Q.OutputStreamBase, Y.HuffmanTable, S.Inflate, G.ExifData, A.DecodeInfo, B.Decoder, E.Encoder, D.PngFrame, D.ICCProfileData, U.Format, U.Channels, U.BlendMode, U.DisposeMode, U.Image, K.ImageException, N.Flip, Z.InputBuffer, X.Interpolation, G.OutputBuffer, X.Vector2D, X.CompositeLayer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Blob, W.Body, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Error, [H.LateError, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, H._Error, P.AssertionError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inherit(H.EfficientLengthIterable, P.Iterable);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable]);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.Closure, [H.TearOffClosure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, G.PngDecoder_decodeFrame_closure, G.PngDecoder__getColor__g_set, G.PngDecoder__getColor__g_get, G.PngDecoder__getColor__b_set, G.PngDecoder__getColor__g_set0, G.PngDecoder__getColor__r_set, G.PngDecoder__getColor__r_get, G.PngDecoder__getColor__g_get0, G.PngDecoder__getColor__b_get, G.PngDecoder__getColor__a_set, G.PngDecoder__getColor__g_set1, G.PngDecoder__getColor__g_get1, G.PngDecoder__getColor__a_get, G.PngDecoder__getColor__a_set0, G.PngDecoder__getColor__b_set0, G.PngDecoder__getColor__g_set2, G.PngDecoder__getColor__r_set0, G.PngDecoder__getColor__r_get0, G.PngDecoder__getColor__g_get2, G.PngDecoder__getColor__b_get0, G.PngDecoder__getColor__a_get0, U.Image_getPixelLinear__linear, U.Image_getPixelCubic__cubic, L.main_closure, L.main__closure, L.main__closure0, L._composite_closure]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(P.MapBase, P.MapMixin);
    _inherit(H.JsLinkedHashMap, P.MapBase);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H.NativeFloat32List, H.NativeTypedArrayOfDouble);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.WorkerGlobalScope, W.MessagePort]);
    _inherit(W.DedicatedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W.File, W.Blob);
    _inherit(W.MessageEvent, W.Event);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(R.ArchiveException, P.FormatException);
    _inherit(T.InputStream, T.InputStreamBase);
    _inherit(Q.OutputStream, Q.OutputStreamBase);
    _inherit(Z.JpegEncoder, E.Encoder);
    _inherit(D.InternalPngFrame, D.PngFrame);
    _inherit(Q.PngInfo, A.DecodeInfo);
    _inherit(Q.InternalPngInfo, Q.PngInfo);
    _inherit(G.PngDecoder, B.Decoder);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    getTypeFromName: getGlobalFromName,
    metadata: [],
    types: ["~()", "@(int)", "int()", "~(@)", "~(~())", "Null(@)", "Null()", "~(@,@)", "Null(@,@)", "@(@)", "@(@,String)", "@(String)", "Null(~())", "Null(@,StackTrace)", "~(int,@)", "Null(Object,StackTrace)", "_Future<@>(@)", "~(Object?,Object?)", "~(Event)", "@(@,@)", "int(int)", "int(int,int,int,int)", "num(num,num,num,num,num)", "~(MessageEvent)", "Null(List<int>)", "CompositeLayer(@)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: typeof Symbol == "function" && typeof Symbol() == "symbol" ? Symbol("$ti") : "$ti"
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","_Response":"Body","NativeFloat64List":"NativeTypedArrayOfDouble","NativeByteData":"NativeTypedData","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JavaScriptObject":{"JSObject":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[]},"LateError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"Iterable":["1"],"ListIterable.E":"1"},"MappedListIterable":{"ListIterable":["2"],"Iterable":["2"],"ListIterable.E":"2"},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"Iterable":["1"]},"NullError":{"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"Map":["1","2"]},"LinkedHashMapKeyIterable":{"Iterable":["1"]},"NativeByteBuffer":{"ByteBuffer":[]},"NativeTypedData":{"TypedData":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"NativeTypedData":[],"TypedData":[]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArray":["double"],"ListMixin":["double"],"Float32List":[],"JavaScriptIndexingBehavior":["double"],"List":["double"],"NativeTypedData":[],"TypedData":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Int32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"NativeTypedData":[],"TypedData":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"Error":[]},"_Future":{"Future":["1"]},"AsyncError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"ListBase":{"ListMixin":["1"],"List":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"double":{"num":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"MessageEvent":{"Event":[]},"DedicatedWorkerGlobalScope":{"EventTarget":[]},"File":{"Blob":[]},"MessagePort":{"EventTarget":[]},"WorkerGlobalScope":{"EventTarget":[]},"_EventStream":{"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"InputStream":{"InputStreamBase":[]},"InternalPngFrame":{"PngFrame":[]},"Uint8List":{"List":["int"],"Iterable":["int"],"TypedData":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"ListBase":1,"MapBase":2,"_ListBase_Object_ListMixin":1}'));
  0;
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AsyncError: findType("AsyncError"),
      Blob: findType("Blob"),
      Body: findType("Body"),
      CompositeLayer: findType("CompositeLayer"),
      Error: findType("Error"),
      Event: findType("Event"),
      File: findType("File"),
      Function: findType("Function"),
      Future_dynamic: findType("Future<@>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_PngFrame: findType("JSArray<PngFrame>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_List_int: findType("JSArray<List<int>?>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_List_int: findType("List<List<int>?>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MessageEvent: findType("MessageEvent"),
      MessagePort: findType("MessagePort"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeTypedData: findType("NativeTypedData"),
      NativeUint8List: findType("NativeUint8List"),
      Null: findType("Null"),
      Object: findType("Object"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_dynamic_dynamic: findType("@(@,@)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_ByteBuffer: findType("ByteBuffer?"),
      nullable_EventTarget: findType("EventTarget?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_List_Object: findType("List<Object>?"),
      nullable_List_Uint8List: findType("List<Uint8List>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_List_nullable_List_int: findType("List<List<int>?>?"),
      nullable_List_nullable_int: findType("List<int?>?"),
      nullable_Object: findType("Object?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable_bool_Function_Object: findType("bool(Object)?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_int: findType("int?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_MessageEvent: findType("~(MessageEvent)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.DedicatedWorkerGlobalScope_methods = W.DedicatedWorkerGlobalScope.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.BlendMode_1 = new U.BlendMode();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.Channels_0 = new U.Channels("Channels.rgb");
    C.Channels_1 = new U.Channels("Channels.rgba");
    C.DisposeMode_1 = new U.DisposeMode();
    C.Flip_0 = new N.Flip("Flip.horizontal");
    C.Flip_1 = new N.Flip("Flip.vertical");
    C.Flip_2 = new N.Flip("Flip.both");
    C.Format_0 = new U.Format("Format.argb");
    C.Format_1 = new U.Format("Format.abgr");
    C.Format_2 = new U.Format("Format.rgba");
    C.Format_3 = new U.Format("Format.bgra");
    C.Format_4 = new U.Format("Format.rgb");
    C.Format_5 = new U.Format("Format.bgr");
    C.Format_6 = new U.Format("Format.luminance");
    C.Interpolation_0 = new X.Interpolation("Interpolation.nearest");
    C.Interpolation_1 = new X.Interpolation("Interpolation.linear");
    C.Interpolation_2 = new X.Interpolation("Interpolation.cubic");
    C.Interpolation_3 = new X.Interpolation("Interpolation.average");
    C.List_2Bc = H.setRuntimeTypeInfo(makeConstList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]), type$.JSArray_int);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([137, 80, 78, 71, 13, 10, 26, 10]), type$.JSArray_int);
    C.List_AKW = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_B8J = H.setRuntimeTypeInfo(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    C.List_F1L = H.setRuntimeTypeInfo(makeConstList([0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.List_F1L2 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119]), type$.JSArray_int);
    C.List_F1L1 = H.setRuntimeTypeInfo(makeConstList([0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125]), type$.JSArray_int);
    C.List_F1L0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), type$.JSArray_int);
    C.List_G61 = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]), type$.JSArray_int);
    C.List_K2a = H.setRuntimeTypeInfo(makeConstList([1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379]), H.findType("JSArray<double>"));
    C.List_UiL = H.setRuntimeTypeInfo(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), type$.JSArray_int);
    C.List_X3d0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), type$.JSArray_int);
    C.List_X3d = H.setRuntimeTypeInfo(makeConstList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), type$.JSArray_int);
    C.List_eea = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]), type$.JSArray_int);
    C.List_i3t = H.setRuntimeTypeInfo(makeConstList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]), type$.JSArray_int);
    C.List_kcl = H.setRuntimeTypeInfo(makeConstList([0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63]), type$.JSArray_int);
    C.List_kcl0 = H.setRuntimeTypeInfo(makeConstList([16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99]), type$.JSArray_int);
    C.List_kcl1 = H.setRuntimeTypeInfo(makeConstList([17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99]), type$.JSArray_int);
    C.List_qQn = H.setRuntimeTypeInfo(makeConstList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]), type$.JSArray_int);
    C.List_uSC = H.setRuntimeTypeInfo(makeConstList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), type$.JSArray_int);
    C.Vector2D_0_0 = new X.Vector2D(0, 0);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H.setRuntimeTypeInfo([], H.findType("JSArray<Object>"));
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float64Array: H.NativeTypedArrayOfDouble, Float32Array: H.NativeFloat32List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, Blob: W.Blob, Body: W.Body, Response: W.Body, DedicatedWorkerGlobalScope: W.DedicatedWorkerGlobalScope, DOMException: W.DomException, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, EventTarget: W.EventTarget, File: W.File, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, WorkerGlobalScope: W.WorkerGlobalScope});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, ArrayBuffer: true, DataView: true, ArrayBufferView: false, Float64Array: true, Float32Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, Blob: false, Body: true, Response: true, DedicatedWorkerGlobalScope: true, DOMException: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, EventTarget: false, File: true, MessageEvent: true, MessagePort: true, WorkerGlobalScope: false});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = L.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=image_compositor.js.map
